// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/api/v3alpha/core/protocol.proto

package envoy_api_v3alpha_core

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TcpProtocolOptions struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TcpProtocolOptions) Reset()         { *m = TcpProtocolOptions{} }
func (m *TcpProtocolOptions) String() string { return proto.CompactTextString(m) }
func (*TcpProtocolOptions) ProtoMessage()    {}
func (*TcpProtocolOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_52a634d5e642c216, []int{0}
}

func (m *TcpProtocolOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpProtocolOptions.Unmarshal(m, b)
}
func (m *TcpProtocolOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpProtocolOptions.Marshal(b, m, deterministic)
}
func (m *TcpProtocolOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpProtocolOptions.Merge(m, src)
}
func (m *TcpProtocolOptions) XXX_Size() int {
	return xxx_messageInfo_TcpProtocolOptions.Size(m)
}
func (m *TcpProtocolOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpProtocolOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TcpProtocolOptions proto.InternalMessageInfo

type HttpProtocolOptions struct {
	IdleTimeout          *duration.Duration    `protobuf:"bytes,1,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	MaxHeadersCount      *wrappers.UInt32Value `protobuf:"bytes,2,opt,name=max_headers_count,json=maxHeadersCount,proto3" json:"max_headers_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *HttpProtocolOptions) Reset()         { *m = HttpProtocolOptions{} }
func (m *HttpProtocolOptions) String() string { return proto.CompactTextString(m) }
func (*HttpProtocolOptions) ProtoMessage()    {}
func (*HttpProtocolOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_52a634d5e642c216, []int{1}
}

func (m *HttpProtocolOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpProtocolOptions.Unmarshal(m, b)
}
func (m *HttpProtocolOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpProtocolOptions.Marshal(b, m, deterministic)
}
func (m *HttpProtocolOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpProtocolOptions.Merge(m, src)
}
func (m *HttpProtocolOptions) XXX_Size() int {
	return xxx_messageInfo_HttpProtocolOptions.Size(m)
}
func (m *HttpProtocolOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpProtocolOptions.DiscardUnknown(m)
}

var xxx_messageInfo_HttpProtocolOptions proto.InternalMessageInfo

func (m *HttpProtocolOptions) GetIdleTimeout() *duration.Duration {
	if m != nil {
		return m.IdleTimeout
	}
	return nil
}

func (m *HttpProtocolOptions) GetMaxHeadersCount() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxHeadersCount
	}
	return nil
}

type Http1ProtocolOptions struct {
	AllowAbsoluteUrl      *wrappers.BoolValue `protobuf:"bytes,1,opt,name=allow_absolute_url,json=allowAbsoluteUrl,proto3" json:"allow_absolute_url,omitempty"`
	AcceptHttp_10         bool                `protobuf:"varint,2,opt,name=accept_http_10,json=acceptHttp10,proto3" json:"accept_http_10,omitempty"`
	DefaultHostForHttp_10 string              `protobuf:"bytes,3,opt,name=default_host_for_http_10,json=defaultHostForHttp10,proto3" json:"default_host_for_http_10,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}            `json:"-"`
	XXX_unrecognized      []byte              `json:"-"`
	XXX_sizecache         int32               `json:"-"`
}

func (m *Http1ProtocolOptions) Reset()         { *m = Http1ProtocolOptions{} }
func (m *Http1ProtocolOptions) String() string { return proto.CompactTextString(m) }
func (*Http1ProtocolOptions) ProtoMessage()    {}
func (*Http1ProtocolOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_52a634d5e642c216, []int{2}
}

func (m *Http1ProtocolOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Http1ProtocolOptions.Unmarshal(m, b)
}
func (m *Http1ProtocolOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Http1ProtocolOptions.Marshal(b, m, deterministic)
}
func (m *Http1ProtocolOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Http1ProtocolOptions.Merge(m, src)
}
func (m *Http1ProtocolOptions) XXX_Size() int {
	return xxx_messageInfo_Http1ProtocolOptions.Size(m)
}
func (m *Http1ProtocolOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_Http1ProtocolOptions.DiscardUnknown(m)
}

var xxx_messageInfo_Http1ProtocolOptions proto.InternalMessageInfo

func (m *Http1ProtocolOptions) GetAllowAbsoluteUrl() *wrappers.BoolValue {
	if m != nil {
		return m.AllowAbsoluteUrl
	}
	return nil
}

func (m *Http1ProtocolOptions) GetAcceptHttp_10() bool {
	if m != nil {
		return m.AcceptHttp_10
	}
	return false
}

func (m *Http1ProtocolOptions) GetDefaultHostForHttp_10() string {
	if m != nil {
		return m.DefaultHostForHttp_10
	}
	return ""
}

type Http2ProtocolOptions struct {
	HpackTableSize                               *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=hpack_table_size,json=hpackTableSize,proto3" json:"hpack_table_size,omitempty"`
	MaxConcurrentStreams                         *wrappers.UInt32Value `protobuf:"bytes,2,opt,name=max_concurrent_streams,json=maxConcurrentStreams,proto3" json:"max_concurrent_streams,omitempty"`
	InitialStreamWindowSize                      *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=initial_stream_window_size,json=initialStreamWindowSize,proto3" json:"initial_stream_window_size,omitempty"`
	InitialConnectionWindowSize                  *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=initial_connection_window_size,json=initialConnectionWindowSize,proto3" json:"initial_connection_window_size,omitempty"`
	AllowConnect                                 bool                  `protobuf:"varint,5,opt,name=allow_connect,json=allowConnect,proto3" json:"allow_connect,omitempty"`
	AllowMetadata                                bool                  `protobuf:"varint,6,opt,name=allow_metadata,json=allowMetadata,proto3" json:"allow_metadata,omitempty"`
	MaxOutboundFrames                            *wrappers.UInt32Value `protobuf:"bytes,7,opt,name=max_outbound_frames,json=maxOutboundFrames,proto3" json:"max_outbound_frames,omitempty"`
	MaxOutboundControlFrames                     *wrappers.UInt32Value `protobuf:"bytes,8,opt,name=max_outbound_control_frames,json=maxOutboundControlFrames,proto3" json:"max_outbound_control_frames,omitempty"`
	MaxConsecutiveInboundFramesWithEmptyPayload  *wrappers.UInt32Value `protobuf:"bytes,9,opt,name=max_consecutive_inbound_frames_with_empty_payload,json=maxConsecutiveInboundFramesWithEmptyPayload,proto3" json:"max_consecutive_inbound_frames_with_empty_payload,omitempty"`
	MaxInboundPriorityFramesPerStream            *wrappers.UInt32Value `protobuf:"bytes,10,opt,name=max_inbound_priority_frames_per_stream,json=maxInboundPriorityFramesPerStream,proto3" json:"max_inbound_priority_frames_per_stream,omitempty"`
	MaxInboundWindowUpdateFramesPerDataFrameSent *wrappers.UInt32Value `protobuf:"bytes,11,opt,name=max_inbound_window_update_frames_per_data_frame_sent,json=maxInboundWindowUpdateFramesPerDataFrameSent,proto3" json:"max_inbound_window_update_frames_per_data_frame_sent,omitempty"`
	StreamErrorOnInvalidHttpMessaging            bool                  `protobuf:"varint,12,opt,name=stream_error_on_invalid_http_messaging,json=streamErrorOnInvalidHttpMessaging,proto3" json:"stream_error_on_invalid_http_messaging,omitempty"`
	XXX_NoUnkeyedLiteral                         struct{}              `json:"-"`
	XXX_unrecognized                             []byte                `json:"-"`
	XXX_sizecache                                int32                 `json:"-"`
}

func (m *Http2ProtocolOptions) Reset()         { *m = Http2ProtocolOptions{} }
func (m *Http2ProtocolOptions) String() string { return proto.CompactTextString(m) }
func (*Http2ProtocolOptions) ProtoMessage()    {}
func (*Http2ProtocolOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_52a634d5e642c216, []int{3}
}

func (m *Http2ProtocolOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Http2ProtocolOptions.Unmarshal(m, b)
}
func (m *Http2ProtocolOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Http2ProtocolOptions.Marshal(b, m, deterministic)
}
func (m *Http2ProtocolOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Http2ProtocolOptions.Merge(m, src)
}
func (m *Http2ProtocolOptions) XXX_Size() int {
	return xxx_messageInfo_Http2ProtocolOptions.Size(m)
}
func (m *Http2ProtocolOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_Http2ProtocolOptions.DiscardUnknown(m)
}

var xxx_messageInfo_Http2ProtocolOptions proto.InternalMessageInfo

func (m *Http2ProtocolOptions) GetHpackTableSize() *wrappers.UInt32Value {
	if m != nil {
		return m.HpackTableSize
	}
	return nil
}

func (m *Http2ProtocolOptions) GetMaxConcurrentStreams() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxConcurrentStreams
	}
	return nil
}

func (m *Http2ProtocolOptions) GetInitialStreamWindowSize() *wrappers.UInt32Value {
	if m != nil {
		return m.InitialStreamWindowSize
	}
	return nil
}

func (m *Http2ProtocolOptions) GetInitialConnectionWindowSize() *wrappers.UInt32Value {
	if m != nil {
		return m.InitialConnectionWindowSize
	}
	return nil
}

func (m *Http2ProtocolOptions) GetAllowConnect() bool {
	if m != nil {
		return m.AllowConnect
	}
	return false
}

func (m *Http2ProtocolOptions) GetAllowMetadata() bool {
	if m != nil {
		return m.AllowMetadata
	}
	return false
}

func (m *Http2ProtocolOptions) GetMaxOutboundFrames() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxOutboundFrames
	}
	return nil
}

func (m *Http2ProtocolOptions) GetMaxOutboundControlFrames() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxOutboundControlFrames
	}
	return nil
}

func (m *Http2ProtocolOptions) GetMaxConsecutiveInboundFramesWithEmptyPayload() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxConsecutiveInboundFramesWithEmptyPayload
	}
	return nil
}

func (m *Http2ProtocolOptions) GetMaxInboundPriorityFramesPerStream() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxInboundPriorityFramesPerStream
	}
	return nil
}

func (m *Http2ProtocolOptions) GetMaxInboundWindowUpdateFramesPerDataFrameSent() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxInboundWindowUpdateFramesPerDataFrameSent
	}
	return nil
}

func (m *Http2ProtocolOptions) GetStreamErrorOnInvalidHttpMessaging() bool {
	if m != nil {
		return m.StreamErrorOnInvalidHttpMessaging
	}
	return false
}

type GrpcProtocolOptions struct {
	Http2ProtocolOptions *Http2ProtocolOptions `protobuf:"bytes,1,opt,name=http2_protocol_options,json=http2ProtocolOptions,proto3" json:"http2_protocol_options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GrpcProtocolOptions) Reset()         { *m = GrpcProtocolOptions{} }
func (m *GrpcProtocolOptions) String() string { return proto.CompactTextString(m) }
func (*GrpcProtocolOptions) ProtoMessage()    {}
func (*GrpcProtocolOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_52a634d5e642c216, []int{4}
}

func (m *GrpcProtocolOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrpcProtocolOptions.Unmarshal(m, b)
}
func (m *GrpcProtocolOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrpcProtocolOptions.Marshal(b, m, deterministic)
}
func (m *GrpcProtocolOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpcProtocolOptions.Merge(m, src)
}
func (m *GrpcProtocolOptions) XXX_Size() int {
	return xxx_messageInfo_GrpcProtocolOptions.Size(m)
}
func (m *GrpcProtocolOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpcProtocolOptions.DiscardUnknown(m)
}

var xxx_messageInfo_GrpcProtocolOptions proto.InternalMessageInfo

func (m *GrpcProtocolOptions) GetHttp2ProtocolOptions() *Http2ProtocolOptions {
	if m != nil {
		return m.Http2ProtocolOptions
	}
	return nil
}

func init() {
	proto.RegisterType((*TcpProtocolOptions)(nil), "envoy.api.v3alpha.core.TcpProtocolOptions")
	proto.RegisterType((*HttpProtocolOptions)(nil), "envoy.api.v3alpha.core.HttpProtocolOptions")
	proto.RegisterType((*Http1ProtocolOptions)(nil), "envoy.api.v3alpha.core.Http1ProtocolOptions")
	proto.RegisterType((*Http2ProtocolOptions)(nil), "envoy.api.v3alpha.core.Http2ProtocolOptions")
	proto.RegisterType((*GrpcProtocolOptions)(nil), "envoy.api.v3alpha.core.GrpcProtocolOptions")
}

func init() {
	proto.RegisterFile("envoy/api/v3alpha/core/protocol.proto", fileDescriptor_52a634d5e642c216)
}

var fileDescriptor_52a634d5e642c216 = []byte{
	// 826 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x4f, 0x53, 0x1b, 0x37,
	0x18, 0xc6, 0x67, 0x43, 0x1a, 0x40, 0xfc, 0x49, 0xba, 0x78, 0xc8, 0x96, 0x74, 0x32, 0x89, 0x9b,
	0x64, 0x18, 0x9a, 0x59, 0x07, 0xe8, 0xb4, 0x97, 0x5e, 0x6a, 0x12, 0x0a, 0x87, 0x0c, 0xee, 0x02,
	0xcd, 0x51, 0xf3, 0x7a, 0x57, 0x60, 0xb5, 0x5a, 0xbd, 0x1a, 0xad, 0x16, 0xdb, 0x39, 0xf7, 0xd2,
	0x63, 0xbf, 0x44, 0x3f, 0x46, 0x3f, 0x18, 0x17, 0x77, 0xf4, 0x67, 0xa9, 0x03, 0xb4, 0x63, 0x7a,
	0xb2, 0x2d, 0x3d, 0xef, 0xef, 0x79, 0x24, 0xbf, 0xfb, 0x2e, 0x79, 0xc9, 0xe4, 0x05, 0x8e, 0x3b,
	0xa0, 0x78, 0xe7, 0x62, 0x17, 0x84, 0x1a, 0x40, 0x27, 0x47, 0xcd, 0x3a, 0x4a, 0xa3, 0xc1, 0x1c,
	0x45, 0xea, 0xbe, 0xc4, 0xeb, 0x4e, 0x96, 0x82, 0xe2, 0x69, 0x90, 0xa5, 0x56, 0xb6, 0xf1, 0xf4,
	0x1c, 0xf1, 0x5c, 0x04, 0x79, 0xbf, 0x3e, 0xeb, 0x14, 0xb5, 0x06, 0xc3, 0x51, 0xfa, 0xba, 0x9b,
	0xfb, 0x43, 0x0d, 0x4a, 0x31, 0x5d, 0x85, 0xfd, 0xc7, 0x17, 0x20, 0x78, 0x01, 0x86, 0x75, 0x9a,
	0x2f, 0x7e, 0xa3, 0xdd, 0x22, 0xf1, 0x49, 0xae, 0x7a, 0x21, 0xc5, 0x91, 0xb2, 0xcc, 0xaa, 0xfd,
	0x67, 0x44, 0xd6, 0x0e, 0x8c, 0xb9, 0xbe, 0x1e, 0x7f, 0x4f, 0x96, 0x79, 0x21, 0x18, 0x35, 0xbc,
	0x64, 0x58, 0x9b, 0x24, 0x7a, 0x16, 0x6d, 0x2e, 0xed, 0x7c, 0x91, 0x7a, 0xf7, 0xb4, 0x71, 0x4f,
	0xdf, 0x86, 0x74, 0xd9, 0x92, 0x95, 0x9f, 0x78, 0x75, 0xfc, 0x13, 0xf9, 0xbc, 0x84, 0x11, 0x1d,
	0x30, 0x28, 0x98, 0xae, 0x68, 0x8e, 0xb5, 0x34, 0xc9, 0x3d, 0x87, 0xf8, 0xf2, 0x06, 0xe2, 0xf4,
	0x50, 0x9a, 0xdd, 0x9d, 0x9f, 0x41, 0xd4, 0xac, 0x3b, 0x7f, 0xd9, 0xbd, 0xbf, 0x75, 0x6f, 0x33,
	0xca, 0x1e, 0x96, 0x30, 0x3a, 0xf0, 0xe5, 0x7b, 0xb6, 0xba, 0xfd, 0x57, 0x44, 0x5a, 0x36, 0xe8,
	0xf6, 0xf5, 0xa4, 0x07, 0x24, 0x06, 0x21, 0x70, 0x48, 0xa1, 0x5f, 0xa1, 0xa8, 0x0d, 0xa3, 0xb5,
	0x16, 0x21, 0xef, 0xc6, 0x0d, 0xb3, 0x2e, 0xa2, 0x70, 0x56, 0xd9, 0x23, 0x57, 0xf5, 0x43, 0x28,
	0x3a, 0xd5, 0x22, 0x7e, 0x41, 0x56, 0x21, 0xcf, 0x99, 0x32, 0x74, 0x60, 0x8c, 0xa2, 0xdb, 0x6f,
	0x5c, 0xe4, 0x85, 0x6c, 0xd9, 0xaf, 0x3a, 0xf7, 0x37, 0xf1, 0xb7, 0x24, 0x29, 0xd8, 0x19, 0xd4,
	0xc2, 0xd0, 0x01, 0x56, 0x86, 0x9e, 0xa1, 0xbe, 0xd2, 0xcf, 0x3d, 0x8b, 0x36, 0x17, 0xb3, 0x56,
	0xd8, 0x3f, 0xc0, 0xca, 0xec, 0xa3, 0xf6, 0x75, 0xed, 0xdf, 0x17, 0xfd, 0x01, 0x76, 0xae, 0x1f,
	0x60, 0x9f, 0x3c, 0x1a, 0x28, 0xc8, 0x7f, 0xa5, 0x06, 0xfa, 0x82, 0xd1, 0x8a, 0x7f, 0x64, 0x21,
	0xfe, 0x7f, 0xde, 0x55, 0xb6, 0xea, 0xaa, 0x4e, 0x6c, 0xd1, 0x31, 0xff, 0xc8, 0x62, 0x20, 0xeb,
	0xf6, 0xd2, 0x73, 0x94, 0x79, 0xad, 0x35, 0x93, 0x86, 0x56, 0x46, 0x33, 0x28, 0xab, 0x99, 0x6e,
	0x7e, 0xe5, 0xb2, 0x4b, 0xb6, 0x16, 0x92, 0xc9, 0x64, 0x32, 0x99, 0xdf, 0x8c, 0xb2, 0x56, 0x09,
	0xa3, 0xbd, 0x2b, 0xd2, 0xb1, 0x07, 0xc5, 0xbf, 0x90, 0x0d, 0x2e, 0xb9, 0xe1, 0x20, 0x02, 0x9b,
	0x0e, 0xb9, 0x2c, 0x70, 0xe8, 0x43, 0xcf, 0xcd, 0x60, 0xf3, 0xf0, 0xb2, 0xbb, 0xbc, 0x45, 0x82,
	0xcd, 0x64, 0x32, 0x97, 0x3d, 0x0e, 0x40, 0x6f, 0xf1, 0xc1, 0xe1, 0xdc, 0x71, 0x34, 0x79, 0xda,
	0x78, 0xe5, 0x28, 0x25, 0xcb, 0xed, 0x6d, 0x7d, 0xe2, 0x77, 0xff, 0xff, 0xf8, 0x3d, 0x09, 0xd0,
	0xbd, 0x2b, 0xe6, 0x94, 0xe7, 0x57, 0x64, 0xc5, 0xf7, 0x52, 0x70, 0x4c, 0x3e, 0x0b, 0x0d, 0x60,
	0x17, 0x43, 0x45, 0xfc, 0x92, 0xac, 0x7a, 0x51, 0xc9, 0x0c, 0x14, 0x60, 0x20, 0x79, 0xe0, 0x54,
	0xbe, 0xf4, 0x7d, 0x58, 0x8c, 0x4f, 0xc9, 0x9a, 0xfd, 0x3b, 0xb0, 0x36, 0x7d, 0xac, 0x65, 0x41,
	0xcf, 0x34, 0x94, 0xac, 0x4a, 0xe6, 0xef, 0xf2, 0x14, 0xd8, 0xa7, 0xe8, 0x28, 0x00, 0xf6, 0x5d,
	0x7d, 0x5c, 0x90, 0x27, 0x9f, 0x60, 0x73, 0x94, 0x46, 0xa3, 0x68, 0xf0, 0x0b, 0x77, 0xc1, 0x27,
	0x53, 0xf8, 0x3d, 0xcf, 0x09, 0x2e, 0xbf, 0x45, 0x64, 0x3b, 0x34, 0x53, 0xc5, 0xf2, 0xda, 0xf0,
	0x0b, 0x46, 0xb9, 0x9c, 0x3e, 0x08, 0x1d, 0x72, 0x33, 0xa0, 0xac, 0x54, 0x66, 0x4c, 0x15, 0x8c,
	0x05, 0x42, 0x91, 0x2c, 0xce, 0xd0, 0xb5, 0x5f, 0xfb, 0xc6, 0x6a, 0xa8, 0x87, 0x72, 0xea, 0x70,
	0x1f, 0xb8, 0x19, 0xbc, 0xb3, 0xc4, 0x9e, 0x07, 0xc6, 0x48, 0x5e, 0xd9, 0x14, 0x8d, 0xb3, 0xd2,
	0x1c, 0x35, 0x37, 0xe3, 0x26, 0x82, 0x62, 0x3a, 0xf4, 0x61, 0x42, 0x66, 0xb0, 0x7e, 0x5e, 0xc2,
	0x28, 0xf8, 0xf5, 0x02, 0xc9, 0xfb, 0xf6, 0x98, 0xf6, 0xed, 0x17, 0xff, 0x11, 0x91, 0x6f, 0xa6,
	0x1d, 0x43, 0xbb, 0xd5, 0xca, 0x0e, 0xd2, 0x69, 0x5b, 0xfb, 0x17, 0xfb, 0xdf, 0xb4, 0x62, 0xd2,
	0x24, 0x4b, 0x77, 0xb9, 0xf7, 0xd7, 0xff, 0x04, 0xf1, 0xcd, 0x77, 0xea, 0xf8, 0x57, 0x61, 0xde,
	0x82, 0x01, 0xf7, 0xe3, 0x98, 0x49, 0x3b, 0x4c, 0x5f, 0x85, 0x87, 0x8d, 0x69, 0x8d, 0x9a, 0xa2,
	0xa4, 0x5c, 0xba, 0xe1, 0xee, 0xe7, 0x4e, 0xc9, 0xaa, 0x0a, 0xce, 0xb9, 0x3c, 0x4f, 0x96, 0x5d,
	0x1f, 0x3e, 0xf7, 0xea, 0x77, 0x56, 0x7c, 0x24, 0x0f, 0xbd, 0xd4, 0x4e, 0x9e, 0xf7, 0x8d, 0xb0,
	0x3d, 0x26, 0x6b, 0x3f, 0x6a, 0x95, 0x5f, 0x9f, 0x44, 0x7d, 0xb2, 0x6e, 0x89, 0x3b, 0xb4, 0x79,
	0x57, 0x51, 0xf4, 0x3b, 0x61, 0x1e, 0xbd, 0x4e, 0x6f, 0x7f, 0x69, 0xa5, 0xb7, 0xcd, 0xb5, 0xac,
	0x35, 0xb8, 0x65, 0xb5, 0xfb, 0x1d, 0x79, 0xc1, 0xd1, 0x73, 0x94, 0xc6, 0xd1, 0xf8, 0x5f, 0x90,
	0xdd, 0x95, 0xa6, 0xd0, 0x7d, 0xf6, 0xa2, 0xfe, 0x03, 0x17, 0x6a, 0xf7, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x75, 0xc4, 0x9a, 0x6a, 0x60, 0x07, 0x00, 0x00,
}
