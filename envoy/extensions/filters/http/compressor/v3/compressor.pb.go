// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/extensions/filters/http/compressor/v3/compressor.proto

package envoy_extensions_filters_http_compressor_v3

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	v3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Compressor struct {
	ContentLength              *wrappers.UInt32Value  `protobuf:"bytes,1,opt,name=content_length,json=contentLength,proto3" json:"content_length,omitempty"`
	ContentType                []string               `protobuf:"bytes,2,rep,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	DisableOnEtagHeader        bool                   `protobuf:"varint,3,opt,name=disable_on_etag_header,json=disableOnEtagHeader,proto3" json:"disable_on_etag_header,omitempty"`
	RemoveAcceptEncodingHeader bool                   `protobuf:"varint,4,opt,name=remove_accept_encoding_header,json=removeAcceptEncodingHeader,proto3" json:"remove_accept_encoding_header,omitempty"`
	RuntimeEnabled             *v3.RuntimeFeatureFlag `protobuf:"bytes,5,opt,name=runtime_enabled,json=runtimeEnabled,proto3" json:"runtime_enabled,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}               `json:"-"`
	XXX_unrecognized           []byte                 `json:"-"`
	XXX_sizecache              int32                  `json:"-"`
}

func (m *Compressor) Reset()         { *m = Compressor{} }
func (m *Compressor) String() string { return proto.CompactTextString(m) }
func (*Compressor) ProtoMessage()    {}
func (*Compressor) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d6daf60a76e0a2b, []int{0}
}

func (m *Compressor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Compressor.Unmarshal(m, b)
}
func (m *Compressor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Compressor.Marshal(b, m, deterministic)
}
func (m *Compressor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Compressor.Merge(m, src)
}
func (m *Compressor) XXX_Size() int {
	return xxx_messageInfo_Compressor.Size(m)
}
func (m *Compressor) XXX_DiscardUnknown() {
	xxx_messageInfo_Compressor.DiscardUnknown(m)
}

var xxx_messageInfo_Compressor proto.InternalMessageInfo

func (m *Compressor) GetContentLength() *wrappers.UInt32Value {
	if m != nil {
		return m.ContentLength
	}
	return nil
}

func (m *Compressor) GetContentType() []string {
	if m != nil {
		return m.ContentType
	}
	return nil
}

func (m *Compressor) GetDisableOnEtagHeader() bool {
	if m != nil {
		return m.DisableOnEtagHeader
	}
	return false
}

func (m *Compressor) GetRemoveAcceptEncodingHeader() bool {
	if m != nil {
		return m.RemoveAcceptEncodingHeader
	}
	return false
}

func (m *Compressor) GetRuntimeEnabled() *v3.RuntimeFeatureFlag {
	if m != nil {
		return m.RuntimeEnabled
	}
	return nil
}

func init() {
	proto.RegisterType((*Compressor)(nil), "envoy.extensions.filters.http.compressor.v3.Compressor")
}

func init() {
	proto.RegisterFile("envoy/extensions/filters/http/compressor/v3/compressor.proto", fileDescriptor_8d6daf60a76e0a2b)
}

var fileDescriptor_8d6daf60a76e0a2b = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xd1, 0x6a, 0xd4, 0x40,
	0x14, 0x86, 0xd9, 0x56, 0x45, 0xa7, 0xda, 0x42, 0x04, 0x59, 0x16, 0xad, 0x5b, 0xaf, 0x16, 0x84,
	0x19, 0xdc, 0xdc, 0xa8, 0x78, 0xd3, 0x96, 0x2d, 0x0a, 0xa2, 0x35, 0xa8, 0xb7, 0x61, 0x36, 0x39,
	0x3b, 0x3b, 0x90, 0x3d, 0x67, 0x98, 0x9c, 0xc4, 0xe6, 0x0d, 0x7c, 0x06, 0xdf, 0xc7, 0x87, 0xf2,
	0x4e, 0x32, 0x93, 0x76, 0x57, 0xbc, 0xea, 0xe5, 0xc9, 0xf9, 0xbf, 0xff, 0x4f, 0xce, 0x1f, 0xf1,
	0x0e, 0xb0, 0xa5, 0x4e, 0xc1, 0x15, 0x03, 0xd6, 0x96, 0xb0, 0x56, 0x2b, 0x5b, 0x31, 0xf8, 0x5a,
	0xad, 0x99, 0x9d, 0x2a, 0x68, 0xe3, 0x3c, 0xd4, 0x35, 0x79, 0xd5, 0xa6, 0x3b, 0x93, 0x74, 0x9e,
	0x98, 0x92, 0x97, 0x81, 0x96, 0x5b, 0x5a, 0x0e, 0xb4, 0xec, 0x69, 0xb9, 0xa3, 0x6f, 0xd3, 0xc9,
	0xf3, 0x18, 0x55, 0x10, 0xae, 0xac, 0x51, 0x05, 0x79, 0xe8, 0x3d, 0x97, 0xba, 0x86, 0xe8, 0x36,
	0x39, 0x36, 0x44, 0xa6, 0x02, 0x15, 0xa6, 0x65, 0xb3, 0x52, 0x3f, 0xbc, 0x76, 0xae, 0x77, 0x8b,
	0xfb, 0x93, 0xa6, 0x74, 0x5a, 0x69, 0x44, 0x62, 0xcd, 0xe1, 0x5d, 0x5b, 0xf0, 0x7d, 0xac, 0x45,
	0x13, 0x25, 0x2f, 0xfe, 0xec, 0x09, 0x71, 0x7e, 0x93, 0x9a, 0x9c, 0x8b, 0xc3, 0x82, 0x90, 0x01,
	0x39, 0xaf, 0x00, 0x0d, 0xaf, 0xc7, 0xa3, 0xe9, 0x68, 0x76, 0x30, 0x7f, 0x2a, 0x63, 0x94, 0xbc,
	0x8e, 0x92, 0xdf, 0x3e, 0x20, 0xa7, 0xf3, 0xef, 0xba, 0x6a, 0x20, 0x7b, 0x34, 0x30, 0x1f, 0x03,
	0x92, 0x9c, 0x88, 0x87, 0xd7, 0x26, 0xdc, 0x39, 0x18, 0xef, 0x4d, 0xf7, 0x67, 0x0f, 0xb2, 0x83,
	0xe1, 0xd9, 0xd7, 0xce, 0x41, 0x92, 0x8a, 0x27, 0xa5, 0xad, 0xf5, 0xb2, 0x82, 0x9c, 0x30, 0x07,
	0xd6, 0x26, 0x5f, 0x83, 0x2e, 0xc1, 0x8f, 0xf7, 0xa7, 0xa3, 0xd9, 0xfd, 0xec, 0xf1, 0xb0, 0xfd,
	0x8c, 0x0b, 0xd6, 0xe6, 0x7d, 0x58, 0x25, 0xa7, 0xe2, 0x99, 0x87, 0x0d, 0xb5, 0x90, 0xeb, 0xa2,
	0x00, 0xc7, 0x39, 0x60, 0x41, 0xa5, 0xc5, 0x1b, 0xf6, 0x4e, 0x60, 0x27, 0x51, 0x74, 0x1a, 0x34,
	0x8b, 0x41, 0x32, 0x58, 0x7c, 0x11, 0x47, 0xbe, 0x41, 0xb6, 0x1b, 0xc8, 0x01, 0xfb, 0x80, 0x72,
	0x7c, 0x37, 0x7c, 0xe0, 0x4c, 0xc6, 0x66, 0xe2, 0xb1, 0x65, 0x7f, 0x6c, 0xd9, 0xa6, 0x32, 0x8b,
	0xe2, 0x0b, 0xd0, 0xdc, 0x78, 0xb8, 0xa8, 0xb4, 0xc9, 0x0e, 0x07, 0x83, 0x45, 0xe4, 0xdf, 0xbe,
	0xfe, 0xf5, 0xfb, 0xe7, 0x71, 0x2a, 0x5e, 0xfd, 0xc3, 0xc7, 0x56, 0xff, 0x2f, 0x75, 0x2e, 0xb7,
	0xc7, 0x3e, 0xfb, 0x24, 0xde, 0x58, 0x8a, 0xb9, 0xce, 0xd3, 0x55, 0x27, 0x6f, 0xf1, 0x73, 0x9c,
	0x1d, 0x6d, 0x8d, 0x2e, 0xfb, 0x4e, 0x2e, 0x47, 0xcb, 0x7b, 0xa1, 0x9c, 0xf4, 0x6f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x3f, 0x8e, 0xa5, 0x90, 0xa3, 0x02, 0x00, 0x00,
}
