// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/service/event_reporting/v2alpha/event_reporting_service.proto

package envoy_service_event_reporting_v2alpha

import (
	context "context"
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	core "github.com/envoyproxy/go-control-plane/envoy/api/v2/core"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StreamEventsRequest struct {
	Identifier           *StreamEventsRequest_Identifier `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Events               []*any.Any                      `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *StreamEventsRequest) Reset()         { *m = StreamEventsRequest{} }
func (m *StreamEventsRequest) String() string { return proto.CompactTextString(m) }
func (*StreamEventsRequest) ProtoMessage()    {}
func (*StreamEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a37fe38e985d5f4, []int{0}
}

func (m *StreamEventsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamEventsRequest.Unmarshal(m, b)
}
func (m *StreamEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamEventsRequest.Marshal(b, m, deterministic)
}
func (m *StreamEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEventsRequest.Merge(m, src)
}
func (m *StreamEventsRequest) XXX_Size() int {
	return xxx_messageInfo_StreamEventsRequest.Size(m)
}
func (m *StreamEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEventsRequest proto.InternalMessageInfo

func (m *StreamEventsRequest) GetIdentifier() *StreamEventsRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *StreamEventsRequest) GetEvents() []*any.Any {
	if m != nil {
		return m.Events
	}
	return nil
}

type StreamEventsRequest_Identifier struct {
	Node                 *core.Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *StreamEventsRequest_Identifier) Reset()         { *m = StreamEventsRequest_Identifier{} }
func (m *StreamEventsRequest_Identifier) String() string { return proto.CompactTextString(m) }
func (*StreamEventsRequest_Identifier) ProtoMessage()    {}
func (*StreamEventsRequest_Identifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a37fe38e985d5f4, []int{0, 0}
}

func (m *StreamEventsRequest_Identifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamEventsRequest_Identifier.Unmarshal(m, b)
}
func (m *StreamEventsRequest_Identifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamEventsRequest_Identifier.Marshal(b, m, deterministic)
}
func (m *StreamEventsRequest_Identifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEventsRequest_Identifier.Merge(m, src)
}
func (m *StreamEventsRequest_Identifier) XXX_Size() int {
	return xxx_messageInfo_StreamEventsRequest_Identifier.Size(m)
}
func (m *StreamEventsRequest_Identifier) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEventsRequest_Identifier.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEventsRequest_Identifier proto.InternalMessageInfo

func (m *StreamEventsRequest_Identifier) GetNode() *core.Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type StreamEventsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamEventsResponse) Reset()         { *m = StreamEventsResponse{} }
func (m *StreamEventsResponse) String() string { return proto.CompactTextString(m) }
func (*StreamEventsResponse) ProtoMessage()    {}
func (*StreamEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a37fe38e985d5f4, []int{1}
}

func (m *StreamEventsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamEventsResponse.Unmarshal(m, b)
}
func (m *StreamEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamEventsResponse.Marshal(b, m, deterministic)
}
func (m *StreamEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEventsResponse.Merge(m, src)
}
func (m *StreamEventsResponse) XXX_Size() int {
	return xxx_messageInfo_StreamEventsResponse.Size(m)
}
func (m *StreamEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEventsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*StreamEventsRequest)(nil), "envoy.service.event_reporting.v2alpha.StreamEventsRequest")
	proto.RegisterType((*StreamEventsRequest_Identifier)(nil), "envoy.service.event_reporting.v2alpha.StreamEventsRequest.Identifier")
	proto.RegisterType((*StreamEventsResponse)(nil), "envoy.service.event_reporting.v2alpha.StreamEventsResponse")
}

func init() {
	proto.RegisterFile("envoy/service/event_reporting/v2alpha/event_reporting_service.proto", fileDescriptor_1a37fe38e985d5f4)
}

var fileDescriptor_1a37fe38e985d5f4 = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0xea, 0xd3, 0x40,
	0x10, 0xc6, 0xdd, 0xe8, 0xbf, 0x94, 0xad, 0x87, 0x12, 0xab, 0xad, 0x41, 0xa5, 0x04, 0x84, 0x9e,
	0x76, 0x25, 0x45, 0x0f, 0x7a, 0x32, 0xa5, 0x07, 0x2f, 0x52, 0xd2, 0x07, 0x28, 0xdb, 0x66, 0x1a,
	0x17, 0xda, 0xdd, 0x75, 0x77, 0x13, 0xcc, 0xcd, 0x93, 0x88, 0x20, 0x82, 0x27, 0xdf, 0xc0, 0x77,
	0xf0, 0x09, 0xbc, 0xfa, 0x2a, 0xde, 0xf4, 0x20, 0xd2, 0x64, 0xa3, 0xb5, 0x16, 0xfe, 0xa5, 0xb7,
	0x64, 0xe6, 0x9b, 0xdf, 0x7e, 0xf3, 0x0d, 0x9e, 0x80, 0x28, 0x64, 0x49, 0x0d, 0xe8, 0x82, 0xaf,
	0x80, 0x42, 0x01, 0xc2, 0x2e, 0x34, 0x28, 0xa9, 0x2d, 0x17, 0x19, 0x2d, 0x22, 0xb6, 0x51, 0x2f,
	0xd8, 0x61, 0x7d, 0xe1, 0xf4, 0x44, 0x69, 0x69, 0xa5, 0x7f, 0xbf, 0x82, 0x90, 0xa6, 0x78, 0x20,
	0x26, 0x0e, 0x12, 0xdc, 0xa9, 0xdf, 0x62, 0x8a, 0xd3, 0x22, 0xa2, 0x2b, 0xa9, 0x81, 0x2e, 0x99,
	0x71, 0x90, 0xe0, 0x76, 0x26, 0x65, 0xb6, 0x01, 0x5a, 0xfd, 0x2d, 0xf3, 0x35, 0x65, 0xa2, 0x74,
	0xad, 0x7b, 0x79, 0xaa, 0x18, 0x65, 0x42, 0x48, 0xcb, 0x2c, 0x97, 0xc2, 0xd0, 0x2d, 0xcf, 0x34,
	0xb3, 0xcd, 0xe8, 0xdd, 0xff, 0xfa, 0xc6, 0x32, 0x9b, 0x1b, 0xd7, 0xee, 0x17, 0x6c, 0xc3, 0x53,
	0x66, 0x81, 0x36, 0x1f, 0x75, 0x23, 0xfc, 0x81, 0xf0, 0x8d, 0xb9, 0xd5, 0xc0, 0xb6, 0xd3, 0x9d,
	0x65, 0x93, 0xc0, 0xcb, 0x1c, 0x8c, 0xf5, 0x01, 0x63, 0x9e, 0x82, 0xb0, 0x7c, 0xcd, 0x41, 0x0f,
	0xd0, 0x10, 0x8d, 0x3a, 0xd1, 0x94, 0x9c, 0xb4, 0x24, 0x39, 0xc2, 0x23, 0xcf, 0xfe, 0xc0, 0x92,
	0x3d, 0xb0, 0xff, 0x08, 0xb7, 0x2a, 0x8a, 0x19, 0x78, 0xc3, 0xab, 0xa3, 0x4e, 0xd4, 0x23, 0x75,
	0x04, 0xa4, 0x89, 0x80, 0x3c, 0x15, 0x65, 0xdc, 0xfe, 0x19, 0x5f, 0x7c, 0x44, 0x5e, 0x1b, 0x25,
	0x4e, 0x1d, 0x4c, 0x30, 0xfe, 0x4b, 0xf4, 0x1f, 0xe2, 0x6b, 0x42, 0xa6, 0xe0, 0x6c, 0xf6, 0x9d,
	0x4d, 0xa6, 0x38, 0x29, 0x22, 0xb2, 0x0b, 0x99, 0x3c, 0x97, 0x29, 0x54, 0x98, 0x77, 0xc8, 0xeb,
	0xa2, 0xa4, 0x92, 0x87, 0xb7, 0x70, 0xef, 0x5f, 0xab, 0x46, 0x49, 0x61, 0x20, 0xfa, 0x8c, 0xf0,
	0xcd, 0xaa, 0x94, 0x34, 0xab, 0xcd, 0xeb, 0x8d, 0xfd, 0xf7, 0x08, 0x5f, 0xdf, 0x1f, 0xf1, 0x1f,
	0x9f, 0x1f, 0x49, 0xf0, 0xe4, 0xac, 0xd9, 0xda, 0x63, 0x78, 0x65, 0x84, 0x1e, 0xa0, 0xf8, 0x0d,
	0xfa, 0xfe, 0xe9, 0xd7, 0x87, 0x8b, 0xd0, 0x1f, 0x5e, 0x82, 0x1a, 0x7f, 0x79, 0xfd, 0xf5, 0x5b,
	0xcb, 0xeb, 0x7a, 0x78, 0xcc, 0x65, 0xfd, 0xae, 0xd2, 0xf2, 0x55, 0x79, 0x9a, 0x85, 0x38, 0x38,
	0x1a, 0xc7, 0x6c, 0x77, 0xa3, 0x19, 0x7a, 0x8b, 0xd0, 0xb2, 0x55, 0xdd, 0x6b, 0xfc, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0x89, 0xaf, 0xdf, 0x87, 0x4c, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventReportingServiceClient is the client API for EventReportingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventReportingServiceClient interface {
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (EventReportingService_StreamEventsClient, error)
}

type eventReportingServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventReportingServiceClient(cc *grpc.ClientConn) EventReportingServiceClient {
	return &eventReportingServiceClient{cc}
}

func (c *eventReportingServiceClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (EventReportingService_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventReportingService_serviceDesc.Streams[0], "/envoy.service.event_reporting.v2alpha.EventReportingService/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventReportingServiceStreamEventsClient{stream}
	return x, nil
}

type EventReportingService_StreamEventsClient interface {
	Send(*StreamEventsRequest) error
	Recv() (*StreamEventsResponse, error)
	grpc.ClientStream
}

type eventReportingServiceStreamEventsClient struct {
	grpc.ClientStream
}

func (x *eventReportingServiceStreamEventsClient) Send(m *StreamEventsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventReportingServiceStreamEventsClient) Recv() (*StreamEventsResponse, error) {
	m := new(StreamEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventReportingServiceServer is the server API for EventReportingService service.
type EventReportingServiceServer interface {
	StreamEvents(EventReportingService_StreamEventsServer) error
}

// UnimplementedEventReportingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventReportingServiceServer struct {
}

func (*UnimplementedEventReportingServiceServer) StreamEvents(srv EventReportingService_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}

func RegisterEventReportingServiceServer(s *grpc.Server, srv EventReportingServiceServer) {
	s.RegisterService(&_EventReportingService_serviceDesc, srv)
}

func _EventReportingService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventReportingServiceServer).StreamEvents(&eventReportingServiceStreamEventsServer{stream})
}

type EventReportingService_StreamEventsServer interface {
	Send(*StreamEventsResponse) error
	Recv() (*StreamEventsRequest, error)
	grpc.ServerStream
}

type eventReportingServiceStreamEventsServer struct {
	grpc.ServerStream
}

func (x *eventReportingServiceStreamEventsServer) Send(m *StreamEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventReportingServiceStreamEventsServer) Recv() (*StreamEventsRequest, error) {
	m := new(StreamEventsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EventReportingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.service.event_reporting.v2alpha.EventReportingService",
	HandlerType: (*EventReportingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _EventReportingService_StreamEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "envoy/service/event_reporting/v2alpha/event_reporting_service.proto",
}
