// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/service/route/v3alpha/srds.proto

package envoy_service_route_v3alpha

import (
	context "context"
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	v3alpha "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3alpha"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SrdsDummy struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SrdsDummy) Reset()         { *m = SrdsDummy{} }
func (m *SrdsDummy) String() string { return proto.CompactTextString(m) }
func (*SrdsDummy) ProtoMessage()    {}
func (*SrdsDummy) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f9d646b6b28020, []int{0}
}

func (m *SrdsDummy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SrdsDummy.Unmarshal(m, b)
}
func (m *SrdsDummy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SrdsDummy.Marshal(b, m, deterministic)
}
func (m *SrdsDummy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SrdsDummy.Merge(m, src)
}
func (m *SrdsDummy) XXX_Size() int {
	return xxx_messageInfo_SrdsDummy.Size(m)
}
func (m *SrdsDummy) XXX_DiscardUnknown() {
	xxx_messageInfo_SrdsDummy.DiscardUnknown(m)
}

var xxx_messageInfo_SrdsDummy proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SrdsDummy)(nil), "envoy.service.route.v3alpha.SrdsDummy")
}

func init() {
	proto.RegisterFile("envoy/service/route/v3alpha/srds.proto", fileDescriptor_f4f9d646b6b28020)
}

var fileDescriptor_f4f9d646b6b28020 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x92, 0x41, 0x4a, 0xf3, 0x40,
	0x14, 0xc7, 0xbf, 0xf9, 0x0a, 0x82, 0xb3, 0x6b, 0x16, 0x22, 0xb1, 0x8a, 0x66, 0x21, 0x5a, 0x70,
	0xc6, 0xb6, 0xa0, 0x50, 0x77, 0xa5, 0xb8, 0x2e, 0xcd, 0x09, 0xc6, 0xe4, 0xd1, 0x0e, 0xb4, 0x79,
	0xe3, 0xcc, 0x24, 0x98, 0xa5, 0xae, 0x8a, 0x5b, 0x77, 0xde, 0xc1, 0x63, 0x78, 0x02, 0x0f, 0xe0,
	0xc6, 0x83, 0x48, 0x27, 0x31, 0x36, 0x14, 0x94, 0xae, 0xdc, 0x4e, 0x7e, 0xef, 0xff, 0x7e, 0x2f,
	0xfc, 0xe9, 0x31, 0x24, 0x19, 0xe6, 0xdc, 0x80, 0xce, 0x64, 0x04, 0x5c, 0x63, 0x6a, 0x81, 0x67,
	0x3d, 0x31, 0x53, 0x53, 0xc1, 0x8d, 0x8e, 0x0d, 0x53, 0x1a, 0x2d, 0x7a, 0x7b, 0x8e, 0x63, 0x25,
	0xc7, 0x1c, 0xc7, 0x4a, 0xce, 0xe7, 0xf5, 0x90, 0x58, 0x9a, 0x08, 0x33, 0xd0, 0x79, 0x15, 0x54,
	0xbd, 0x14, 0x69, 0x7e, 0x6b, 0x82, 0x38, 0x99, 0x01, 0x17, 0x4a, 0x72, 0x91, 0x24, 0x68, 0x85,
	0x95, 0x98, 0x94, 0xbb, 0xfc, 0xa3, 0x34, 0x56, 0x62, 0xf5, 0x9d, 0x67, 0xa0, 0x8d, 0xc4, 0x44,
	0x26, 0x93, 0x02, 0x09, 0xda, 0x74, 0x3b, 0xd4, 0xb1, 0x19, 0xa6, 0xf3, 0x79, 0xde, 0xdf, 0x7f,
	0x7e, 0x5d, 0x1c, 0xec, 0xd2, 0x9d, 0x42, 0x51, 0x28, 0xc9, 0xb2, 0x2e, 0xab, 0x3e, 0x77, 0xdf,
	0x1b, 0xb4, 0x15, 0x46, 0xa8, 0x20, 0x1e, 0x2f, 0xad, 0xcd, 0xf0, 0x4b, 0x26, 0x2c, 0x7c, 0xbd,
	0x7b, 0x42, 0xbd, 0xd0, 0x6a, 0x10, 0xf3, 0x55, 0xcc, 0xeb, 0xb0, 0xfa, 0xcd, 0xdf, 0x47, 0x94,
	0x67, 0xb1, 0x2a, 0x69, 0x0c, 0xb7, 0x29, 0x18, 0xeb, 0x77, 0x37, 0x19, 0x31, 0x0a, 0x13, 0x03,
	0xc1, 0xbf, 0x13, 0x72, 0x4e, 0xbc, 0x47, 0x42, 0x9b, 0x43, 0x98, 0x59, 0x51, 0x53, 0xb8, 0xf8,
	0x3d, 0x6f, 0x39, 0xb3, 0xe6, 0x71, 0xb9, 0xf1, 0x5c, 0x4d, 0xe6, 0x85, 0xd0, 0xe6, 0x35, 0xd8,
	0x68, 0xfa, 0x17, 0xff, 0xa3, 0xf3, 0xf0, 0xf6, 0xf1, 0xf4, 0x3f, 0x08, 0x0e, 0xd7, 0xdb, 0xd3,
	0x37, 0xce, 0xe7, 0xcc, 0xb5, 0xcf, 0x38, 0xae, 0xd1, 0x27, 0xed, 0xc1, 0x15, 0x3d, 0x95, 0x58,
	0xac, 0x52, 0x1a, 0xef, 0x72, 0xf6, 0x43, 0x59, 0x07, 0xae, 0x38, 0xa3, 0x65, 0x8b, 0x46, 0x64,
	0x41, 0xc8, 0xcd, 0x96, 0x6b, 0x54, 0xef, 0x33, 0x00, 0x00, 0xff, 0xff, 0x07, 0x64, 0x63, 0x10,
	0x0a, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScopedRoutesDiscoveryServiceClient is the client API for ScopedRoutesDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScopedRoutesDiscoveryServiceClient interface {
	StreamScopedRoutes(ctx context.Context, opts ...grpc.CallOption) (ScopedRoutesDiscoveryService_StreamScopedRoutesClient, error)
	DeltaScopedRoutes(ctx context.Context, opts ...grpc.CallOption) (ScopedRoutesDiscoveryService_DeltaScopedRoutesClient, error)
	FetchScopedRoutes(ctx context.Context, in *v3alpha.DiscoveryRequest, opts ...grpc.CallOption) (*v3alpha.DiscoveryResponse, error)
}

type scopedRoutesDiscoveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewScopedRoutesDiscoveryServiceClient(cc *grpc.ClientConn) ScopedRoutesDiscoveryServiceClient {
	return &scopedRoutesDiscoveryServiceClient{cc}
}

func (c *scopedRoutesDiscoveryServiceClient) StreamScopedRoutes(ctx context.Context, opts ...grpc.CallOption) (ScopedRoutesDiscoveryService_StreamScopedRoutesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ScopedRoutesDiscoveryService_serviceDesc.Streams[0], "/envoy.service.route.v3alpha.ScopedRoutesDiscoveryService/StreamScopedRoutes", opts...)
	if err != nil {
		return nil, err
	}
	x := &scopedRoutesDiscoveryServiceStreamScopedRoutesClient{stream}
	return x, nil
}

type ScopedRoutesDiscoveryService_StreamScopedRoutesClient interface {
	Send(*v3alpha.DiscoveryRequest) error
	Recv() (*v3alpha.DiscoveryResponse, error)
	grpc.ClientStream
}

type scopedRoutesDiscoveryServiceStreamScopedRoutesClient struct {
	grpc.ClientStream
}

func (x *scopedRoutesDiscoveryServiceStreamScopedRoutesClient) Send(m *v3alpha.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scopedRoutesDiscoveryServiceStreamScopedRoutesClient) Recv() (*v3alpha.DiscoveryResponse, error) {
	m := new(v3alpha.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scopedRoutesDiscoveryServiceClient) DeltaScopedRoutes(ctx context.Context, opts ...grpc.CallOption) (ScopedRoutesDiscoveryService_DeltaScopedRoutesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ScopedRoutesDiscoveryService_serviceDesc.Streams[1], "/envoy.service.route.v3alpha.ScopedRoutesDiscoveryService/DeltaScopedRoutes", opts...)
	if err != nil {
		return nil, err
	}
	x := &scopedRoutesDiscoveryServiceDeltaScopedRoutesClient{stream}
	return x, nil
}

type ScopedRoutesDiscoveryService_DeltaScopedRoutesClient interface {
	Send(*v3alpha.DeltaDiscoveryRequest) error
	Recv() (*v3alpha.DeltaDiscoveryResponse, error)
	grpc.ClientStream
}

type scopedRoutesDiscoveryServiceDeltaScopedRoutesClient struct {
	grpc.ClientStream
}

func (x *scopedRoutesDiscoveryServiceDeltaScopedRoutesClient) Send(m *v3alpha.DeltaDiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scopedRoutesDiscoveryServiceDeltaScopedRoutesClient) Recv() (*v3alpha.DeltaDiscoveryResponse, error) {
	m := new(v3alpha.DeltaDiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scopedRoutesDiscoveryServiceClient) FetchScopedRoutes(ctx context.Context, in *v3alpha.DiscoveryRequest, opts ...grpc.CallOption) (*v3alpha.DiscoveryResponse, error) {
	out := new(v3alpha.DiscoveryResponse)
	err := c.cc.Invoke(ctx, "/envoy.service.route.v3alpha.ScopedRoutesDiscoveryService/FetchScopedRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScopedRoutesDiscoveryServiceServer is the server API for ScopedRoutesDiscoveryService service.
type ScopedRoutesDiscoveryServiceServer interface {
	StreamScopedRoutes(ScopedRoutesDiscoveryService_StreamScopedRoutesServer) error
	DeltaScopedRoutes(ScopedRoutesDiscoveryService_DeltaScopedRoutesServer) error
	FetchScopedRoutes(context.Context, *v3alpha.DiscoveryRequest) (*v3alpha.DiscoveryResponse, error)
}

// UnimplementedScopedRoutesDiscoveryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedScopedRoutesDiscoveryServiceServer struct {
}

func (*UnimplementedScopedRoutesDiscoveryServiceServer) StreamScopedRoutes(srv ScopedRoutesDiscoveryService_StreamScopedRoutesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamScopedRoutes not implemented")
}
func (*UnimplementedScopedRoutesDiscoveryServiceServer) DeltaScopedRoutes(srv ScopedRoutesDiscoveryService_DeltaScopedRoutesServer) error {
	return status.Errorf(codes.Unimplemented, "method DeltaScopedRoutes not implemented")
}
func (*UnimplementedScopedRoutesDiscoveryServiceServer) FetchScopedRoutes(ctx context.Context, req *v3alpha.DiscoveryRequest) (*v3alpha.DiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchScopedRoutes not implemented")
}

func RegisterScopedRoutesDiscoveryServiceServer(s *grpc.Server, srv ScopedRoutesDiscoveryServiceServer) {
	s.RegisterService(&_ScopedRoutesDiscoveryService_serviceDesc, srv)
}

func _ScopedRoutesDiscoveryService_StreamScopedRoutes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScopedRoutesDiscoveryServiceServer).StreamScopedRoutes(&scopedRoutesDiscoveryServiceStreamScopedRoutesServer{stream})
}

type ScopedRoutesDiscoveryService_StreamScopedRoutesServer interface {
	Send(*v3alpha.DiscoveryResponse) error
	Recv() (*v3alpha.DiscoveryRequest, error)
	grpc.ServerStream
}

type scopedRoutesDiscoveryServiceStreamScopedRoutesServer struct {
	grpc.ServerStream
}

func (x *scopedRoutesDiscoveryServiceStreamScopedRoutesServer) Send(m *v3alpha.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scopedRoutesDiscoveryServiceStreamScopedRoutesServer) Recv() (*v3alpha.DiscoveryRequest, error) {
	m := new(v3alpha.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ScopedRoutesDiscoveryService_DeltaScopedRoutes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScopedRoutesDiscoveryServiceServer).DeltaScopedRoutes(&scopedRoutesDiscoveryServiceDeltaScopedRoutesServer{stream})
}

type ScopedRoutesDiscoveryService_DeltaScopedRoutesServer interface {
	Send(*v3alpha.DeltaDiscoveryResponse) error
	Recv() (*v3alpha.DeltaDiscoveryRequest, error)
	grpc.ServerStream
}

type scopedRoutesDiscoveryServiceDeltaScopedRoutesServer struct {
	grpc.ServerStream
}

func (x *scopedRoutesDiscoveryServiceDeltaScopedRoutesServer) Send(m *v3alpha.DeltaDiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scopedRoutesDiscoveryServiceDeltaScopedRoutesServer) Recv() (*v3alpha.DeltaDiscoveryRequest, error) {
	m := new(v3alpha.DeltaDiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ScopedRoutesDiscoveryService_FetchScopedRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v3alpha.DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopedRoutesDiscoveryServiceServer).FetchScopedRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envoy.service.route.v3alpha.ScopedRoutesDiscoveryService/FetchScopedRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopedRoutesDiscoveryServiceServer).FetchScopedRoutes(ctx, req.(*v3alpha.DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScopedRoutesDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.service.route.v3alpha.ScopedRoutesDiscoveryService",
	HandlerType: (*ScopedRoutesDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchScopedRoutes",
			Handler:    _ScopedRoutesDiscoveryService_FetchScopedRoutes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamScopedRoutes",
			Handler:       _ScopedRoutesDiscoveryService_StreamScopedRoutes_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeltaScopedRoutes",
			Handler:       _ScopedRoutesDiscoveryService_DeltaScopedRoutes_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "envoy/service/route/v3alpha/srds.proto",
}
