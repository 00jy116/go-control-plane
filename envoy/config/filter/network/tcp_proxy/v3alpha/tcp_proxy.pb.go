// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/network/tcp_proxy/v3alpha/tcp_proxy.proto

package envoy_config_filter_network_tcp_proxy_v3alpha

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/api/annotations"
	core "github.com/envoyproxy/go-control-plane/envoy/api/v3alpha/core"
	v3alpha "github.com/envoyproxy/go-control-plane/envoy/config/filter/accesslog/v3alpha"
	v3alpha1 "github.com/envoyproxy/go-control-plane/envoy/type/v3alpha"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TcpProxy struct {
	StatPrefix string `protobuf:"bytes,1,opt,name=stat_prefix,json=statPrefix,proto3" json:"stat_prefix,omitempty"`
	// Types that are valid to be assigned to ClusterSpecifier:
	//	*TcpProxy_Cluster
	//	*TcpProxy_WeightedClusters
	ClusterSpecifier      isTcpProxy_ClusterSpecifier `protobuf_oneof:"cluster_specifier"`
	MetadataMatch         *core.Metadata              `protobuf:"bytes,9,opt,name=metadata_match,json=metadataMatch,proto3" json:"metadata_match,omitempty"`
	IdleTimeout           *duration.Duration          `protobuf:"bytes,8,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	DownstreamIdleTimeout *duration.Duration          `protobuf:"bytes,3,opt,name=downstream_idle_timeout,json=downstreamIdleTimeout,proto3" json:"downstream_idle_timeout,omitempty"`
	UpstreamIdleTimeout   *duration.Duration          `protobuf:"bytes,4,opt,name=upstream_idle_timeout,json=upstreamIdleTimeout,proto3" json:"upstream_idle_timeout,omitempty"`
	AccessLog             []*v3alpha.AccessLog        `protobuf:"bytes,5,rep,name=access_log,json=accessLog,proto3" json:"access_log,omitempty"`
	MaxConnectAttempts    *wrappers.UInt32Value       `protobuf:"bytes,7,opt,name=max_connect_attempts,json=maxConnectAttempts,proto3" json:"max_connect_attempts,omitempty"`
	HashPolicy            []*v3alpha1.HashPolicy      `protobuf:"bytes,11,rep,name=hash_policy,json=hashPolicy,proto3" json:"hash_policy,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                    `json:"-"`
	XXX_unrecognized      []byte                      `json:"-"`
	XXX_sizecache         int32                       `json:"-"`
}

func (m *TcpProxy) Reset()         { *m = TcpProxy{} }
func (m *TcpProxy) String() string { return proto.CompactTextString(m) }
func (*TcpProxy) ProtoMessage()    {}
func (*TcpProxy) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cada114fb4da110, []int{0}
}

func (m *TcpProxy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpProxy.Unmarshal(m, b)
}
func (m *TcpProxy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpProxy.Marshal(b, m, deterministic)
}
func (m *TcpProxy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpProxy.Merge(m, src)
}
func (m *TcpProxy) XXX_Size() int {
	return xxx_messageInfo_TcpProxy.Size(m)
}
func (m *TcpProxy) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpProxy.DiscardUnknown(m)
}

var xxx_messageInfo_TcpProxy proto.InternalMessageInfo

func (m *TcpProxy) GetStatPrefix() string {
	if m != nil {
		return m.StatPrefix
	}
	return ""
}

type isTcpProxy_ClusterSpecifier interface {
	isTcpProxy_ClusterSpecifier()
}

type TcpProxy_Cluster struct {
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3,oneof"`
}

type TcpProxy_WeightedClusters struct {
	WeightedClusters *TcpProxy_WeightedCluster `protobuf:"bytes,10,opt,name=weighted_clusters,json=weightedClusters,proto3,oneof"`
}

func (*TcpProxy_Cluster) isTcpProxy_ClusterSpecifier() {}

func (*TcpProxy_WeightedClusters) isTcpProxy_ClusterSpecifier() {}

func (m *TcpProxy) GetClusterSpecifier() isTcpProxy_ClusterSpecifier {
	if m != nil {
		return m.ClusterSpecifier
	}
	return nil
}

func (m *TcpProxy) GetCluster() string {
	if x, ok := m.GetClusterSpecifier().(*TcpProxy_Cluster); ok {
		return x.Cluster
	}
	return ""
}

func (m *TcpProxy) GetWeightedClusters() *TcpProxy_WeightedCluster {
	if x, ok := m.GetClusterSpecifier().(*TcpProxy_WeightedClusters); ok {
		return x.WeightedClusters
	}
	return nil
}

func (m *TcpProxy) GetMetadataMatch() *core.Metadata {
	if m != nil {
		return m.MetadataMatch
	}
	return nil
}

func (m *TcpProxy) GetIdleTimeout() *duration.Duration {
	if m != nil {
		return m.IdleTimeout
	}
	return nil
}

func (m *TcpProxy) GetDownstreamIdleTimeout() *duration.Duration {
	if m != nil {
		return m.DownstreamIdleTimeout
	}
	return nil
}

func (m *TcpProxy) GetUpstreamIdleTimeout() *duration.Duration {
	if m != nil {
		return m.UpstreamIdleTimeout
	}
	return nil
}

func (m *TcpProxy) GetAccessLog() []*v3alpha.AccessLog {
	if m != nil {
		return m.AccessLog
	}
	return nil
}

func (m *TcpProxy) GetMaxConnectAttempts() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxConnectAttempts
	}
	return nil
}

func (m *TcpProxy) GetHashPolicy() []*v3alpha1.HashPolicy {
	if m != nil {
		return m.HashPolicy
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TcpProxy) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TcpProxy_Cluster)(nil),
		(*TcpProxy_WeightedClusters)(nil),
	}
}

type TcpProxy_WeightedCluster struct {
	Clusters             []*TcpProxy_WeightedCluster_ClusterWeight `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *TcpProxy_WeightedCluster) Reset()         { *m = TcpProxy_WeightedCluster{} }
func (m *TcpProxy_WeightedCluster) String() string { return proto.CompactTextString(m) }
func (*TcpProxy_WeightedCluster) ProtoMessage()    {}
func (*TcpProxy_WeightedCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cada114fb4da110, []int{0, 0}
}

func (m *TcpProxy_WeightedCluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpProxy_WeightedCluster.Unmarshal(m, b)
}
func (m *TcpProxy_WeightedCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpProxy_WeightedCluster.Marshal(b, m, deterministic)
}
func (m *TcpProxy_WeightedCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpProxy_WeightedCluster.Merge(m, src)
}
func (m *TcpProxy_WeightedCluster) XXX_Size() int {
	return xxx_messageInfo_TcpProxy_WeightedCluster.Size(m)
}
func (m *TcpProxy_WeightedCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpProxy_WeightedCluster.DiscardUnknown(m)
}

var xxx_messageInfo_TcpProxy_WeightedCluster proto.InternalMessageInfo

func (m *TcpProxy_WeightedCluster) GetClusters() []*TcpProxy_WeightedCluster_ClusterWeight {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type TcpProxy_WeightedCluster_ClusterWeight struct {
	Name                 string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Weight               uint32         `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	MetadataMatch        *core.Metadata `protobuf:"bytes,3,opt,name=metadata_match,json=metadataMatch,proto3" json:"metadata_match,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TcpProxy_WeightedCluster_ClusterWeight) Reset() {
	*m = TcpProxy_WeightedCluster_ClusterWeight{}
}
func (m *TcpProxy_WeightedCluster_ClusterWeight) String() string { return proto.CompactTextString(m) }
func (*TcpProxy_WeightedCluster_ClusterWeight) ProtoMessage()    {}
func (*TcpProxy_WeightedCluster_ClusterWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cada114fb4da110, []int{0, 0, 0}
}

func (m *TcpProxy_WeightedCluster_ClusterWeight) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpProxy_WeightedCluster_ClusterWeight.Unmarshal(m, b)
}
func (m *TcpProxy_WeightedCluster_ClusterWeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpProxy_WeightedCluster_ClusterWeight.Marshal(b, m, deterministic)
}
func (m *TcpProxy_WeightedCluster_ClusterWeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpProxy_WeightedCluster_ClusterWeight.Merge(m, src)
}
func (m *TcpProxy_WeightedCluster_ClusterWeight) XXX_Size() int {
	return xxx_messageInfo_TcpProxy_WeightedCluster_ClusterWeight.Size(m)
}
func (m *TcpProxy_WeightedCluster_ClusterWeight) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpProxy_WeightedCluster_ClusterWeight.DiscardUnknown(m)
}

var xxx_messageInfo_TcpProxy_WeightedCluster_ClusterWeight proto.InternalMessageInfo

func (m *TcpProxy_WeightedCluster_ClusterWeight) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TcpProxy_WeightedCluster_ClusterWeight) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *TcpProxy_WeightedCluster_ClusterWeight) GetMetadataMatch() *core.Metadata {
	if m != nil {
		return m.MetadataMatch
	}
	return nil
}

func init() {
	proto.RegisterType((*TcpProxy)(nil), "envoy.config.filter.network.tcp_proxy.v3alpha.TcpProxy")
	proto.RegisterType((*TcpProxy_WeightedCluster)(nil), "envoy.config.filter.network.tcp_proxy.v3alpha.TcpProxy.WeightedCluster")
	proto.RegisterType((*TcpProxy_WeightedCluster_ClusterWeight)(nil), "envoy.config.filter.network.tcp_proxy.v3alpha.TcpProxy.WeightedCluster.ClusterWeight")
}

func init() {
	proto.RegisterFile("envoy/config/filter/network/tcp_proxy/v3alpha/tcp_proxy.proto", fileDescriptor_0cada114fb4da110)
}

var fileDescriptor_0cada114fb4da110 = []byte{
	// 731 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcf, 0x6f, 0xd3, 0x30,
	0x18, 0x5d, 0xda, 0x6e, 0xed, 0x5c, 0x0a, 0x5b, 0x60, 0x5a, 0x28, 0x68, 0x14, 0x04, 0x52, 0x85,
	0x44, 0xc2, 0x5a, 0x21, 0xa1, 0x01, 0x87, 0x65, 0x48, 0xeb, 0x10, 0x63, 0x5d, 0xb4, 0x1f, 0xc7,
	0xc8, 0x4b, 0xdc, 0xd6, 0x22, 0x89, 0x2d, 0xdb, 0x69, 0x3b, 0xf1, 0x0f, 0x70, 0xe6, 0x08, 0x7f,
	0x0f, 0x07, 0xfe, 0x19, 0xce, 0x68, 0x27, 0x14, 0xc7, 0x49, 0xb7, 0xd1, 0x69, 0x1b, 0x70, 0xaa,
	0xfb, 0xf9, 0xbd, 0xf7, 0xbd, 0x7e, 0xdf, 0x73, 0xc1, 0x1b, 0x14, 0x0d, 0xc9, 0xb1, 0xe5, 0x91,
	0xa8, 0x87, 0xfb, 0x56, 0x0f, 0x07, 0x02, 0x31, 0x2b, 0x42, 0x62, 0x44, 0xd8, 0x47, 0x4b, 0x78,
	0xd4, 0xa5, 0x8c, 0x8c, 0x8f, 0xad, 0x61, 0x1b, 0x06, 0x74, 0x00, 0x27, 0x15, 0x93, 0x32, 0x22,
	0x88, 0xfe, 0x4c, 0xd2, 0xcd, 0x94, 0x6e, 0xa6, 0x74, 0x53, 0xd1, 0xcd, 0x09, 0x58, 0xd1, 0xeb,
	0x8f, 0xd3, 0x6e, 0x90, 0xe2, 0x5c, 0xd1, 0x23, 0x0c, 0x59, 0xd0, 0xf7, 0x19, 0xe2, 0x3c, 0x15,
	0xad, 0x3f, 0xbc, 0x00, 0x75, 0x04, 0x39, 0x52, 0x90, 0x17, 0xd3, 0x6c, 0x43, 0xcf, 0x43, 0x9c,
	0x07, 0xa4, 0x9f, 0xd3, 0xf2, 0x8a, 0xa2, 0xa9, 0xfe, 0xe2, 0x98, 0xa2, 0x1c, 0x33, 0x80, 0x7c,
	0xe0, 0x52, 0x12, 0x60, 0x4f, 0xfd, 0xa8, 0xfa, 0x4a, 0x9f, 0x90, 0x7e, 0x80, 0x2c, 0xf9, 0xed,
	0x28, 0xee, 0x59, 0x7e, 0xcc, 0xa0, 0xc0, 0x24, 0xba, 0xe8, 0x7e, 0xc4, 0x20, 0xa5, 0x88, 0x65,
	0xfe, 0x9f, 0xc4, 0x3e, 0x85, 0xd2, 0x3e, 0x8c, 0x22, 0x22, 0x24, 0x95, 0x5b, 0x43, 0xc4, 0x38,
	0x26, 0x11, 0x8e, 0x32, 0x33, 0xcb, 0x43, 0x18, 0x60, 0x1f, 0x0a, 0x64, 0x65, 0x87, 0xf4, 0xe2,
	0xd1, 0x37, 0x00, 0x2a, 0x7b, 0x1e, 0xed, 0x26, 0xa3, 0xd3, 0x9b, 0xa0, 0xca, 0x05, 0x14, 0x2e,
	0x65, 0xa8, 0x87, 0xc7, 0x86, 0xd6, 0xd0, 0x9a, 0xf3, 0x76, 0xf9, 0xc4, 0x2e, 0xb1, 0x42, 0x43,
	0x73, 0x40, 0x72, 0xd7, 0x95, 0x57, 0x7a, 0x1d, 0x94, 0xbd, 0x20, 0xe6, 0x02, 0x31, 0xa3, 0x90,
	0xa0, 0x3a, 0x33, 0x4e, 0x56, 0xd0, 0x87, 0x60, 0x71, 0x84, 0x70, 0x7f, 0x20, 0x90, 0xef, 0xaa,
	0x1a, 0x37, 0x40, 0x43, 0x6b, 0x56, 0x5b, 0x9b, 0xe6, 0xb5, 0x76, 0x68, 0x66, 0xce, 0xcc, 0x43,
	0x25, 0xb8, 0x91, 0xea, 0x75, 0x66, 0x9c, 0x85, 0xd1, 0xd9, 0x12, 0xd7, 0x37, 0xc1, 0xcd, 0x10,
	0x09, 0xe8, 0x43, 0x01, 0xdd, 0x10, 0x0a, 0x6f, 0x60, 0xcc, 0xcb, 0xa6, 0x0d, 0xd5, 0x14, 0x52,
	0x9c, 0x0b, 0x27, 0x3b, 0x36, 0xb7, 0x15, 0xda, 0xa9, 0x65, 0xbc, 0xed, 0x84, 0xa6, 0xbf, 0x06,
	0x37, 0xb0, 0x1f, 0x20, 0x57, 0xe0, 0x10, 0x91, 0x58, 0x18, 0x15, 0x29, 0x73, 0xd7, 0x4c, 0x57,
	0x61, 0x66, 0xab, 0x30, 0xdf, 0xaa, 0x55, 0x39, 0xd5, 0x04, 0xbe, 0x97, 0xa2, 0xf5, 0x5d, 0xb0,
	0xec, 0x93, 0x51, 0xc4, 0x05, 0x43, 0x30, 0x74, 0xcf, 0x08, 0x15, 0x2f, 0x13, 0x5a, 0x9a, 0x30,
	0xb7, 0x4e, 0x49, 0x6e, 0x83, 0xa5, 0x98, 0x4e, 0x13, 0x2c, 0x5d, 0x26, 0x78, 0x3b, 0xe3, 0x9d,
	0x96, 0xdb, 0x01, 0x20, 0x0d, 0xab, 0x1b, 0x90, 0xbe, 0x31, 0xdb, 0x28, 0x36, 0xab, 0xad, 0xe7,
	0x53, 0x37, 0x33, 0xc9, 0x74, 0x36, 0xb8, 0x75, 0x59, 0x79, 0x4f, 0xfa, 0xce, 0x3c, 0xcc, 0x8e,
	0xfa, 0x21, 0xb8, 0x13, 0xc2, 0xb1, 0xeb, 0x91, 0x28, 0x42, 0x9e, 0x70, 0xa1, 0x10, 0x28, 0xa4,
	0x82, 0x1b, 0x65, 0x69, 0xef, 0xfe, 0x1f, 0xf6, 0xf6, 0xb7, 0x22, 0xd1, 0x6e, 0x1d, 0xc0, 0x20,
	0x46, 0x32, 0x5e, 0x4f, 0x0b, 0x4d, 0xcd, 0xd1, 0x43, 0x38, 0xde, 0x48, 0x15, 0xd6, 0x95, 0x80,
	0xbe, 0x05, 0xaa, 0xa7, 0x9e, 0x8c, 0x51, 0x95, 0x56, 0x57, 0x94, 0xd5, 0xe4, 0x65, 0xe5, 0xbe,
	0x3a, 0x90, 0x0f, 0xba, 0x12, 0x65, 0x57, 0x4e, 0xec, 0xd9, 0x2f, 0x5a, 0x61, 0x41, 0x73, 0xc0,
	0x20, 0xaf, 0xd6, 0x7f, 0x14, 0xc1, 0xad, 0x73, 0x29, 0xd2, 0x3f, 0x81, 0x4a, 0x1e, 0x50, 0x4d,
	0x6a, 0xef, 0xff, 0xa7, 0x80, 0x9a, 0xea, 0x33, 0x2d, 0x67, 0x96, 0x2a, 0x9a, 0x93, 0x37, 0xac,
	0xff, 0xd4, 0x40, 0xed, 0x0c, 0x4a, 0xbf, 0x07, 0x4a, 0x11, 0x0c, 0xd1, 0xf9, 0x77, 0x27, 0x8b,
	0xfa, 0x03, 0x30, 0x97, 0x26, 0x5e, 0x3e, 0xb8, 0xda, 0x64, 0x6e, 0xaa, 0x3c, 0x25, 0xfe, 0xc5,
	0xbf, 0x8a, 0xff, 0xda, 0xc1, 0xd7, 0xef, 0x9f, 0x57, 0x76, 0xc1, 0xce, 0x15, 0x27, 0xd1, 0xba,
	0xe2, 0x10, 0xd6, 0x3a, 0x89, 0xee, 0x06, 0x58, 0xff, 0x67, 0xdd, 0xb5, 0x97, 0x89, 0x52, 0x1b,
	0xac, 0x5e, 0x5b, 0xc9, 0x36, 0xc0, 0xa2, 0x5a, 0x80, 0xcb, 0x29, 0xf2, 0x70, 0x0f, 0x23, 0xa6,
	0x17, 0x7f, 0xd9, 0xda, 0xbb, 0x52, 0x65, 0x6e, 0xa1, 0xec, 0xd4, 0x7c, 0x44, 0x19, 0xf2, 0x60,
	0xf2, 0xdf, 0x35, 0x5c, 0xb5, 0x3f, 0x80, 0x57, 0x98, 0xa4, 0xf3, 0x4b, 0xb5, 0xae, 0x95, 0x0e,
	0xbb, 0x96, 0xf5, 0xed, 0x26, 0xc9, 0xef, 0x6a, 0x47, 0x73, 0xf2, 0x09, 0xb4, 0x7f, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x96, 0x1d, 0xca, 0x60, 0x0a, 0x07, 0x00, 0x00,
}
