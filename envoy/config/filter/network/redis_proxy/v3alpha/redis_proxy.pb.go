// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/network/redis_proxy/v3alpha/redis_proxy.proto

package envoy_config_filter_network_redis_proxy_v3alpha

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	core "github.com/envoyproxy/go-control-plane/envoy/api/v3alpha/core"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RedisProxy_ConnPoolSettings_ReadPolicy int32

const (
	RedisProxy_ConnPoolSettings_MASTER         RedisProxy_ConnPoolSettings_ReadPolicy = 0
	RedisProxy_ConnPoolSettings_PREFER_MASTER  RedisProxy_ConnPoolSettings_ReadPolicy = 1
	RedisProxy_ConnPoolSettings_REPLICA        RedisProxy_ConnPoolSettings_ReadPolicy = 2
	RedisProxy_ConnPoolSettings_PREFER_REPLICA RedisProxy_ConnPoolSettings_ReadPolicy = 3
	RedisProxy_ConnPoolSettings_ANY            RedisProxy_ConnPoolSettings_ReadPolicy = 4
)

var RedisProxy_ConnPoolSettings_ReadPolicy_name = map[int32]string{
	0: "MASTER",
	1: "PREFER_MASTER",
	2: "REPLICA",
	3: "PREFER_REPLICA",
	4: "ANY",
}

var RedisProxy_ConnPoolSettings_ReadPolicy_value = map[string]int32{
	"MASTER":         0,
	"PREFER_MASTER":  1,
	"REPLICA":        2,
	"PREFER_REPLICA": 3,
	"ANY":            4,
}

func (x RedisProxy_ConnPoolSettings_ReadPolicy) String() string {
	return proto.EnumName(RedisProxy_ConnPoolSettings_ReadPolicy_name, int32(x))
}

func (RedisProxy_ConnPoolSettings_ReadPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8d5ad9127b0653d7, []int{0, 0, 0}
}

type RedisProxy struct {
	StatPrefix                   string                       `protobuf:"bytes,1,opt,name=stat_prefix,json=statPrefix,proto3" json:"stat_prefix,omitempty"`
	HiddenEnvoyDeprecatedCluster string                       `protobuf:"bytes,2,opt,name=hidden_envoy_deprecated_cluster,json=hiddenEnvoyDeprecatedCluster,proto3" json:"hidden_envoy_deprecated_cluster,omitempty"` // Deprecated: Do not use.
	Settings                     *RedisProxy_ConnPoolSettings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
	LatencyInMicros              bool                         `protobuf:"varint,4,opt,name=latency_in_micros,json=latencyInMicros,proto3" json:"latency_in_micros,omitempty"`
	PrefixRoutes                 *RedisProxy_PrefixRoutes     `protobuf:"bytes,5,opt,name=prefix_routes,json=prefixRoutes,proto3" json:"prefix_routes,omitempty"`
	DownstreamAuthPassword       *core.DataSource             `protobuf:"bytes,6,opt,name=downstream_auth_password,json=downstreamAuthPassword,proto3" json:"downstream_auth_password,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}                     `json:"-"`
	XXX_unrecognized             []byte                       `json:"-"`
	XXX_sizecache                int32                        `json:"-"`
}

func (m *RedisProxy) Reset()         { *m = RedisProxy{} }
func (m *RedisProxy) String() string { return proto.CompactTextString(m) }
func (*RedisProxy) ProtoMessage()    {}
func (*RedisProxy) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d5ad9127b0653d7, []int{0}
}

func (m *RedisProxy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisProxy.Unmarshal(m, b)
}
func (m *RedisProxy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisProxy.Marshal(b, m, deterministic)
}
func (m *RedisProxy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisProxy.Merge(m, src)
}
func (m *RedisProxy) XXX_Size() int {
	return xxx_messageInfo_RedisProxy.Size(m)
}
func (m *RedisProxy) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisProxy.DiscardUnknown(m)
}

var xxx_messageInfo_RedisProxy proto.InternalMessageInfo

func (m *RedisProxy) GetStatPrefix() string {
	if m != nil {
		return m.StatPrefix
	}
	return ""
}

// Deprecated: Do not use.
func (m *RedisProxy) GetHiddenEnvoyDeprecatedCluster() string {
	if m != nil {
		return m.HiddenEnvoyDeprecatedCluster
	}
	return ""
}

func (m *RedisProxy) GetSettings() *RedisProxy_ConnPoolSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *RedisProxy) GetLatencyInMicros() bool {
	if m != nil {
		return m.LatencyInMicros
	}
	return false
}

func (m *RedisProxy) GetPrefixRoutes() *RedisProxy_PrefixRoutes {
	if m != nil {
		return m.PrefixRoutes
	}
	return nil
}

func (m *RedisProxy) GetDownstreamAuthPassword() *core.DataSource {
	if m != nil {
		return m.DownstreamAuthPassword
	}
	return nil
}

type RedisProxy_ConnPoolSettings struct {
	OpTimeout                     *duration.Duration                     `protobuf:"bytes,1,opt,name=op_timeout,json=opTimeout,proto3" json:"op_timeout,omitempty"`
	EnableHashtagging             bool                                   `protobuf:"varint,2,opt,name=enable_hashtagging,json=enableHashtagging,proto3" json:"enable_hashtagging,omitempty"`
	EnableRedirection             bool                                   `protobuf:"varint,3,opt,name=enable_redirection,json=enableRedirection,proto3" json:"enable_redirection,omitempty"`
	MaxBufferSizeBeforeFlush      uint32                                 `protobuf:"varint,4,opt,name=max_buffer_size_before_flush,json=maxBufferSizeBeforeFlush,proto3" json:"max_buffer_size_before_flush,omitempty"`
	BufferFlushTimeout            *duration.Duration                     `protobuf:"bytes,5,opt,name=buffer_flush_timeout,json=bufferFlushTimeout,proto3" json:"buffer_flush_timeout,omitempty"`
	MaxUpstreamUnknownConnections *wrappers.UInt32Value                  `protobuf:"bytes,6,opt,name=max_upstream_unknown_connections,json=maxUpstreamUnknownConnections,proto3" json:"max_upstream_unknown_connections,omitempty"`
	EnableCommandStats            bool                                   `protobuf:"varint,8,opt,name=enable_command_stats,json=enableCommandStats,proto3" json:"enable_command_stats,omitempty"`
	ReadPolicy                    RedisProxy_ConnPoolSettings_ReadPolicy `protobuf:"varint,7,opt,name=read_policy,json=readPolicy,proto3,enum=envoy.config.filter.network.redis_proxy.v3alpha.RedisProxy_ConnPoolSettings_ReadPolicy" json:"read_policy,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}                               `json:"-"`
	XXX_unrecognized              []byte                                 `json:"-"`
	XXX_sizecache                 int32                                  `json:"-"`
}

func (m *RedisProxy_ConnPoolSettings) Reset()         { *m = RedisProxy_ConnPoolSettings{} }
func (m *RedisProxy_ConnPoolSettings) String() string { return proto.CompactTextString(m) }
func (*RedisProxy_ConnPoolSettings) ProtoMessage()    {}
func (*RedisProxy_ConnPoolSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d5ad9127b0653d7, []int{0, 0}
}

func (m *RedisProxy_ConnPoolSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisProxy_ConnPoolSettings.Unmarshal(m, b)
}
func (m *RedisProxy_ConnPoolSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisProxy_ConnPoolSettings.Marshal(b, m, deterministic)
}
func (m *RedisProxy_ConnPoolSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisProxy_ConnPoolSettings.Merge(m, src)
}
func (m *RedisProxy_ConnPoolSettings) XXX_Size() int {
	return xxx_messageInfo_RedisProxy_ConnPoolSettings.Size(m)
}
func (m *RedisProxy_ConnPoolSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisProxy_ConnPoolSettings.DiscardUnknown(m)
}

var xxx_messageInfo_RedisProxy_ConnPoolSettings proto.InternalMessageInfo

func (m *RedisProxy_ConnPoolSettings) GetOpTimeout() *duration.Duration {
	if m != nil {
		return m.OpTimeout
	}
	return nil
}

func (m *RedisProxy_ConnPoolSettings) GetEnableHashtagging() bool {
	if m != nil {
		return m.EnableHashtagging
	}
	return false
}

func (m *RedisProxy_ConnPoolSettings) GetEnableRedirection() bool {
	if m != nil {
		return m.EnableRedirection
	}
	return false
}

func (m *RedisProxy_ConnPoolSettings) GetMaxBufferSizeBeforeFlush() uint32 {
	if m != nil {
		return m.MaxBufferSizeBeforeFlush
	}
	return 0
}

func (m *RedisProxy_ConnPoolSettings) GetBufferFlushTimeout() *duration.Duration {
	if m != nil {
		return m.BufferFlushTimeout
	}
	return nil
}

func (m *RedisProxy_ConnPoolSettings) GetMaxUpstreamUnknownConnections() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxUpstreamUnknownConnections
	}
	return nil
}

func (m *RedisProxy_ConnPoolSettings) GetEnableCommandStats() bool {
	if m != nil {
		return m.EnableCommandStats
	}
	return false
}

func (m *RedisProxy_ConnPoolSettings) GetReadPolicy() RedisProxy_ConnPoolSettings_ReadPolicy {
	if m != nil {
		return m.ReadPolicy
	}
	return RedisProxy_ConnPoolSettings_MASTER
}

type RedisProxy_PrefixRoutes struct {
	Routes                               []*RedisProxy_PrefixRoutes_Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	CaseInsensitive                      bool                             `protobuf:"varint,2,opt,name=case_insensitive,json=caseInsensitive,proto3" json:"case_insensitive,omitempty"`
	HiddenEnvoyDeprecatedCatchAllCluster string                           `protobuf:"bytes,3,opt,name=hidden_envoy_deprecated_catch_all_cluster,json=hiddenEnvoyDeprecatedCatchAllCluster,proto3" json:"hidden_envoy_deprecated_catch_all_cluster,omitempty"` // Deprecated: Do not use.
	CatchAllRoute                        *RedisProxy_PrefixRoutes_Route   `protobuf:"bytes,4,opt,name=catch_all_route,json=catchAllRoute,proto3" json:"catch_all_route,omitempty"`
	XXX_NoUnkeyedLiteral                 struct{}                         `json:"-"`
	XXX_unrecognized                     []byte                           `json:"-"`
	XXX_sizecache                        int32                            `json:"-"`
}

func (m *RedisProxy_PrefixRoutes) Reset()         { *m = RedisProxy_PrefixRoutes{} }
func (m *RedisProxy_PrefixRoutes) String() string { return proto.CompactTextString(m) }
func (*RedisProxy_PrefixRoutes) ProtoMessage()    {}
func (*RedisProxy_PrefixRoutes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d5ad9127b0653d7, []int{0, 1}
}

func (m *RedisProxy_PrefixRoutes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisProxy_PrefixRoutes.Unmarshal(m, b)
}
func (m *RedisProxy_PrefixRoutes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisProxy_PrefixRoutes.Marshal(b, m, deterministic)
}
func (m *RedisProxy_PrefixRoutes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisProxy_PrefixRoutes.Merge(m, src)
}
func (m *RedisProxy_PrefixRoutes) XXX_Size() int {
	return xxx_messageInfo_RedisProxy_PrefixRoutes.Size(m)
}
func (m *RedisProxy_PrefixRoutes) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisProxy_PrefixRoutes.DiscardUnknown(m)
}

var xxx_messageInfo_RedisProxy_PrefixRoutes proto.InternalMessageInfo

func (m *RedisProxy_PrefixRoutes) GetRoutes() []*RedisProxy_PrefixRoutes_Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *RedisProxy_PrefixRoutes) GetCaseInsensitive() bool {
	if m != nil {
		return m.CaseInsensitive
	}
	return false
}

// Deprecated: Do not use.
func (m *RedisProxy_PrefixRoutes) GetHiddenEnvoyDeprecatedCatchAllCluster() string {
	if m != nil {
		return m.HiddenEnvoyDeprecatedCatchAllCluster
	}
	return ""
}

func (m *RedisProxy_PrefixRoutes) GetCatchAllRoute() *RedisProxy_PrefixRoutes_Route {
	if m != nil {
		return m.CatchAllRoute
	}
	return nil
}

type RedisProxy_PrefixRoutes_Route struct {
	Prefix               string                                               `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	RemovePrefix         bool                                                 `protobuf:"varint,2,opt,name=remove_prefix,json=removePrefix,proto3" json:"remove_prefix,omitempty"`
	Cluster              string                                               `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	RequestMirrorPolicy  []*RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy `protobuf:"bytes,4,rep,name=request_mirror_policy,json=requestMirrorPolicy,proto3" json:"request_mirror_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *RedisProxy_PrefixRoutes_Route) Reset()         { *m = RedisProxy_PrefixRoutes_Route{} }
func (m *RedisProxy_PrefixRoutes_Route) String() string { return proto.CompactTextString(m) }
func (*RedisProxy_PrefixRoutes_Route) ProtoMessage()    {}
func (*RedisProxy_PrefixRoutes_Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d5ad9127b0653d7, []int{0, 1, 0}
}

func (m *RedisProxy_PrefixRoutes_Route) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisProxy_PrefixRoutes_Route.Unmarshal(m, b)
}
func (m *RedisProxy_PrefixRoutes_Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisProxy_PrefixRoutes_Route.Marshal(b, m, deterministic)
}
func (m *RedisProxy_PrefixRoutes_Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisProxy_PrefixRoutes_Route.Merge(m, src)
}
func (m *RedisProxy_PrefixRoutes_Route) XXX_Size() int {
	return xxx_messageInfo_RedisProxy_PrefixRoutes_Route.Size(m)
}
func (m *RedisProxy_PrefixRoutes_Route) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisProxy_PrefixRoutes_Route.DiscardUnknown(m)
}

var xxx_messageInfo_RedisProxy_PrefixRoutes_Route proto.InternalMessageInfo

func (m *RedisProxy_PrefixRoutes_Route) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *RedisProxy_PrefixRoutes_Route) GetRemovePrefix() bool {
	if m != nil {
		return m.RemovePrefix
	}
	return false
}

func (m *RedisProxy_PrefixRoutes_Route) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *RedisProxy_PrefixRoutes_Route) GetRequestMirrorPolicy() []*RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy {
	if m != nil {
		return m.RequestMirrorPolicy
	}
	return nil
}

type RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy struct {
	Cluster              string                         `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	RuntimeFraction      *core.RuntimeFractionalPercent `protobuf:"bytes,2,opt,name=runtime_fraction,json=runtimeFraction,proto3" json:"runtime_fraction,omitempty"`
	ExcludeReadCommands  bool                           `protobuf:"varint,3,opt,name=exclude_read_commands,json=excludeReadCommands,proto3" json:"exclude_read_commands,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy) Reset() {
	*m = RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy{}
}
func (m *RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy) String() string {
	return proto.CompactTextString(m)
}
func (*RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy) ProtoMessage() {}
func (*RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d5ad9127b0653d7, []int{0, 1, 0, 0}
}

func (m *RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy.Unmarshal(m, b)
}
func (m *RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy.Marshal(b, m, deterministic)
}
func (m *RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy.Merge(m, src)
}
func (m *RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy) XXX_Size() int {
	return xxx_messageInfo_RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy.Size(m)
}
func (m *RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy proto.InternalMessageInfo

func (m *RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy) GetRuntimeFraction() *core.RuntimeFractionalPercent {
	if m != nil {
		return m.RuntimeFraction
	}
	return nil
}

func (m *RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy) GetExcludeReadCommands() bool {
	if m != nil {
		return m.ExcludeReadCommands
	}
	return false
}

type RedisProtocolOptions struct {
	AuthPassword         *core.DataSource `protobuf:"bytes,1,opt,name=auth_password,json=authPassword,proto3" json:"auth_password,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RedisProtocolOptions) Reset()         { *m = RedisProtocolOptions{} }
func (m *RedisProtocolOptions) String() string { return proto.CompactTextString(m) }
func (*RedisProtocolOptions) ProtoMessage()    {}
func (*RedisProtocolOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d5ad9127b0653d7, []int{1}
}

func (m *RedisProtocolOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisProtocolOptions.Unmarshal(m, b)
}
func (m *RedisProtocolOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisProtocolOptions.Marshal(b, m, deterministic)
}
func (m *RedisProtocolOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisProtocolOptions.Merge(m, src)
}
func (m *RedisProtocolOptions) XXX_Size() int {
	return xxx_messageInfo_RedisProtocolOptions.Size(m)
}
func (m *RedisProtocolOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisProtocolOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RedisProtocolOptions proto.InternalMessageInfo

func (m *RedisProtocolOptions) GetAuthPassword() *core.DataSource {
	if m != nil {
		return m.AuthPassword
	}
	return nil
}

func init() {
	proto.RegisterEnum("envoy.config.filter.network.redis_proxy.v3alpha.RedisProxy_ConnPoolSettings_ReadPolicy", RedisProxy_ConnPoolSettings_ReadPolicy_name, RedisProxy_ConnPoolSettings_ReadPolicy_value)
	proto.RegisterType((*RedisProxy)(nil), "envoy.config.filter.network.redis_proxy.v3alpha.RedisProxy")
	proto.RegisterType((*RedisProxy_ConnPoolSettings)(nil), "envoy.config.filter.network.redis_proxy.v3alpha.RedisProxy.ConnPoolSettings")
	proto.RegisterType((*RedisProxy_PrefixRoutes)(nil), "envoy.config.filter.network.redis_proxy.v3alpha.RedisProxy.PrefixRoutes")
	proto.RegisterType((*RedisProxy_PrefixRoutes_Route)(nil), "envoy.config.filter.network.redis_proxy.v3alpha.RedisProxy.PrefixRoutes.Route")
	proto.RegisterType((*RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy)(nil), "envoy.config.filter.network.redis_proxy.v3alpha.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy")
	proto.RegisterType((*RedisProtocolOptions)(nil), "envoy.config.filter.network.redis_proxy.v3alpha.RedisProtocolOptions")
}

func init() {
	proto.RegisterFile("envoy/config/filter/network/redis_proxy/v3alpha/redis_proxy.proto", fileDescriptor_8d5ad9127b0653d7)
}

var fileDescriptor_8d5ad9127b0653d7 = []byte{
	// 1126 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x5b, 0x6f, 0x1b, 0x45,
	0x14, 0x66, 0x9d, 0x9b, 0x7b, 0x92, 0x34, 0xee, 0xf4, 0x82, 0x89, 0x4a, 0x71, 0x03, 0x0f, 0x29,
	0x12, 0xbb, 0x95, 0x2b, 0x84, 0x14, 0x71, 0x91, 0x9d, 0x0b, 0x31, 0x34, 0xad, 0x35, 0x69, 0x40,
	0xa8, 0x15, 0xa3, 0xf1, 0xee, 0xd8, 0x1e, 0x75, 0x3d, 0xb3, 0xcc, 0xcc, 0x3a, 0x4e, 0x1f, 0x2b,
	0x21, 0x21, 0x7e, 0x00, 0x0f, 0xfc, 0x01, 0x24, 0x1e, 0xf8, 0x17, 0xf0, 0xa3, 0x2a, 0x21, 0xa1,
	0x9d, 0x19, 0x5f, 0x4a, 0x1b, 0x68, 0xd3, 0x3c, 0xed, 0xce, 0x39, 0xdf, 0x7c, 0xe7, 0x32, 0xe7,
	0x02, 0x0d, 0x26, 0x86, 0xf2, 0x24, 0x8a, 0xa5, 0xe8, 0xf2, 0x5e, 0xd4, 0xe5, 0xa9, 0x61, 0x2a,
	0x12, 0xcc, 0x1c, 0x4b, 0xf5, 0x38, 0x52, 0x2c, 0xe1, 0x9a, 0x64, 0x4a, 0x8e, 0x4e, 0xa2, 0xe1,
	0x1d, 0x9a, 0x66, 0x7d, 0x3a, 0x2b, 0x0b, 0x33, 0x25, 0x8d, 0x44, 0x91, 0xa5, 0x08, 0x1d, 0x45,
	0xe8, 0x28, 0x42, 0x4f, 0x11, 0xce, 0xc2, 0x3d, 0xc5, 0xfa, 0x4d, 0x67, 0x93, 0x66, 0x7c, 0xc2,
	0x1a, 0x4b, 0xc5, 0xa2, 0x0e, 0xd5, 0xcc, 0x71, 0xae, 0xdf, 0xe8, 0x49, 0xd9, 0x4b, 0x59, 0x64,
	0x4f, 0x9d, 0xbc, 0x1b, 0x25, 0xb9, 0xa2, 0x86, 0x4b, 0x71, 0x9a, 0xfe, 0x58, 0xd1, 0x2c, 0x63,
	0x4a, 0x7b, 0xfd, 0xcd, 0x3c, 0xc9, 0x68, 0x44, 0x85, 0x90, 0xc6, 0x5e, 0xd3, 0xd1, 0x90, 0x29,
	0xcd, 0xa5, 0xe0, 0xa2, 0xe7, 0x21, 0x6f, 0x0f, 0x69, 0xca, 0x13, 0x6a, 0x58, 0x34, 0xfe, 0x71,
	0x8a, 0x8d, 0xbf, 0x11, 0x00, 0x2e, 0xdc, 0x6e, 0x17, 0x5e, 0xa3, 0x4d, 0x58, 0xd6, 0x86, 0x1a,
	0x92, 0x29, 0xd6, 0xe5, 0xa3, 0x6a, 0x50, 0x0b, 0x36, 0x2f, 0x34, 0x97, 0x9e, 0x35, 0xe7, 0x55,
	0xa9, 0x16, 0x60, 0x28, 0x74, 0x6d, 0xab, 0x42, 0x2d, 0x78, 0xaf, 0xcf, 0x93, 0x84, 0x09, 0x62,
	0x03, 0x24, 0x09, 0xcb, 0x14, 0x8b, 0xa9, 0x61, 0x09, 0x89, 0xd3, 0x5c, 0x1b, 0xa6, 0xaa, 0x25,
	0x7b, 0xbb, 0x54, 0x0d, 0xf0, 0x75, 0x07, 0xdd, 0x2d, 0x90, 0x3b, 0x13, 0xe0, 0xb6, 0xc3, 0x21,
	0x05, 0x65, 0xcd, 0x8c, 0xe1, 0xa2, 0xa7, 0xab, 0x73, 0xb5, 0x60, 0x73, 0xb9, 0x7e, 0x37, 0x7c,
	0xcd, 0x34, 0x87, 0xd3, 0x18, 0xc2, 0x6d, 0x29, 0x44, 0x5b, 0xca, 0xf4, 0xd0, 0x73, 0x36, 0xcb,
	0xcf, 0x9a, 0x0b, 0x3f, 0x07, 0xa5, 0x4a, 0x80, 0x27, 0x76, 0xd0, 0x87, 0x70, 0x29, 0xa5, 0x86,
	0x89, 0xf8, 0x84, 0x70, 0x41, 0x06, 0x3c, 0x56, 0x52, 0x57, 0xe7, 0x6b, 0xc1, 0x66, 0x19, 0xaf,
	0x79, 0x45, 0x4b, 0x1c, 0x58, 0x31, 0x1a, 0xc0, 0xaa, 0xcb, 0x07, 0x51, 0x32, 0x37, 0x4c, 0x57,
	0x17, 0xac, 0x93, 0xfb, 0x6f, 0xe2, 0xa4, 0xcb, 0x22, 0xb6, 0x7c, 0x78, 0x25, 0x9b, 0x39, 0xa1,
	0x47, 0x50, 0x4d, 0xe4, 0xb1, 0xd0, 0x46, 0x31, 0x3a, 0x20, 0x34, 0x37, 0x7d, 0x92, 0x51, 0xad,
	0x8f, 0xa5, 0x4a, 0xaa, 0x8b, 0xd6, 0xf2, 0x86, 0xb7, 0x4c, 0x33, 0x3e, 0xe1, 0x2e, 0x8a, 0x2a,
	0xdc, 0xa1, 0x86, 0x1e, 0xca, 0x5c, 0xc5, 0x0c, 0x5f, 0x9b, 0x72, 0x34, 0x72, 0xd3, 0x6f, 0x7b,
	0x86, 0xf5, 0x1f, 0x17, 0xa1, 0xf2, 0xef, 0x0c, 0xa1, 0x26, 0x80, 0xcc, 0x88, 0xe1, 0x03, 0x26,
	0x73, 0x63, 0x5f, 0x7d, 0xb9, 0xfe, 0x4e, 0xe8, 0xca, 0x2e, 0x1c, 0x97, 0x5d, 0xb8, 0xe3, 0xcb,
	0xd2, 0x26, 0xf4, 0xf7, 0xa0, 0x54, 0x0e, 0xf0, 0x05, 0x99, 0x3d, 0x70, 0xb7, 0xd0, 0x47, 0x80,
	0x98, 0xa0, 0x9d, 0x94, 0x91, 0x3e, 0xd5, 0x7d, 0x43, 0x7b, 0x3d, 0x2e, 0x7a, 0xb6, 0x06, 0xca,
	0xf8, 0x92, 0xd3, 0xec, 0x4f, 0x15, 0x33, 0xf0, 0x22, 0x53, 0x8a, 0xc5, 0x05, 0xb3, 0x7d, 0xfe,
	0x09, 0x1c, 0x4f, 0x15, 0xe8, 0x73, 0xb8, 0x3e, 0xa0, 0x23, 0xd2, 0xc9, 0xbb, 0x5d, 0xa6, 0x88,
	0xe6, 0x4f, 0x18, 0xe9, 0xb0, 0xae, 0x54, 0x8c, 0x74, 0xd3, 0x5c, 0xf7, 0xed, 0xd3, 0xad, 0xe2,
	0xea, 0x80, 0x8e, 0x9a, 0x16, 0x72, 0xc8, 0x9f, 0xb0, 0xa6, 0x05, 0xec, 0x15, 0x7a, 0xf4, 0x35,
	0x5c, 0xf1, 0x77, 0x2d, 0x7e, 0x12, 0xeb, 0xc2, 0xff, 0xc4, 0x8a, 0x91, 0xbb, 0x66, 0x59, 0xc6,
	0xa1, 0x32, 0xa8, 0x15, 0xce, 0xe4, 0x99, 0x7f, 0xa3, 0x5c, 0x3c, 0x16, 0xf2, 0x58, 0x90, 0x58,
	0x0a, 0xe1, 0xfc, 0xd5, 0xfe, 0xa5, 0xae, 0xbf, 0x40, 0x7c, 0xd4, 0x12, 0xe6, 0x4e, 0xfd, 0x1b,
	0x9a, 0xe6, 0x0c, 0xbf, 0x3b, 0xa0, 0xa3, 0x23, 0x4f, 0x72, 0xe4, 0x38, 0xb6, 0xa7, 0x14, 0xe8,
	0x36, 0x5c, 0xf1, 0x29, 0x8a, 0xe5, 0x60, 0x40, 0x45, 0x42, 0x8a, 0xfe, 0xd3, 0xd5, 0xb2, 0x4d,
	0x92, 0x4f, 0xdf, 0xb6, 0x53, 0x1d, 0x16, 0x1a, 0xf4, 0x34, 0x80, 0x65, 0xc5, 0x68, 0x42, 0x32,
	0x99, 0xf2, 0xf8, 0xa4, 0xba, 0x54, 0x0b, 0x36, 0x2f, 0xd6, 0xbf, 0x3d, 0xcf, 0x6e, 0x0a, 0x31,
	0xa3, 0x49, 0xdb, 0xd2, 0xdb, 0x3a, 0x78, 0x6a, 0x1b, 0x0b, 0xd4, 0x44, 0xba, 0x71, 0x54, 0x4c,
	0x94, 0xf1, 0x09, 0x01, 0x2c, 0x1e, 0x34, 0x0e, 0x1f, 0xec, 0xe2, 0xca, 0x5b, 0xe8, 0x12, 0xac,
	0xb6, 0xf1, 0xee, 0xde, 0x2e, 0x26, 0x5e, 0x14, 0xa0, 0x65, 0x58, 0xc2, 0xbb, 0xed, 0xbb, 0xad,
	0xed, 0x46, 0xa5, 0x84, 0x10, 0x5c, 0xf4, 0xfa, 0xb1, 0x6c, 0x0e, 0x2d, 0xc1, 0x5c, 0xe3, 0xde,
	0x77, 0x95, 0xf9, 0xad, 0x83, 0x5f, 0xff, 0xfc, 0xe9, 0xc6, 0x3e, 0xec, 0xbd, 0x72, 0x2c, 0xf5,
	0xff, 0x0a, 0x63, 0xfd, 0xaf, 0x32, 0xac, 0xcc, 0x36, 0x21, 0xea, 0xc2, 0xa2, 0x6f, 0xef, 0xa0,
	0x36, 0xb7, 0xb9, 0x5c, 0xbf, 0x77, 0x5e, 0xed, 0x1d, 0xda, 0x0f, 0xf6, 0xec, 0xe8, 0x16, 0x54,
	0x62, 0xaa, 0x19, 0xe1, 0x42, 0x33, 0xa1, 0xb9, 0xe1, 0x43, 0xe6, 0xbb, 0x64, 0xad, 0x90, 0xb7,
	0xa6, 0x62, 0xf4, 0x10, 0x6e, 0x9d, 0x3a, 0x63, 0xa9, 0x89, 0xfb, 0x84, 0xa6, 0xe9, 0x64, 0xda,
	0xce, 0x4d, 0xa6, 0xed, 0x07, 0x2f, 0x9f, 0xb6, 0xc5, 0x8d, 0x46, 0x9a, 0x8e, 0xa7, 0xee, 0x10,
	0xd6, 0xa6, 0x24, 0xd6, 0x37, 0xdb, 0x44, 0xe7, 0x1f, 0xf8, 0x6a, 0xec, 0x2d, 0xdb, 0xe3, 0xfa,
	0xd3, 0x05, 0x58, 0xb0, 0x7f, 0xe8, 0x1a, 0x2c, 0xce, 0xee, 0x19, 0xec, 0x4f, 0xe8, 0x7d, 0x58,
	0x55, 0x6c, 0x20, 0x87, 0x6c, 0xbc, 0x86, 0x5c, 0x7a, 0x56, 0x9c, 0xd0, 0xef, 0x9f, 0x9b, 0xb0,
	0xf4, 0x7c, 0xe4, 0x93, 0x2d, 0x35, 0x96, 0xa3, 0x5f, 0x02, 0xb8, 0xaa, 0xd8, 0x0f, 0x39, 0xd3,
	0x86, 0x0c, 0xb8, 0x52, 0x52, 0x8d, 0xfb, 0x62, 0xde, 0xbe, 0x70, 0xe7, 0x7c, 0x03, 0x0d, 0xb1,
	0xb3, 0x75, 0x60, 0x4d, 0xb9, 0xf2, 0xc7, 0x97, 0xd5, 0x8b, 0xc2, 0xf5, 0x3f, 0x4a, 0x70, 0xf9,
	0x25, 0xe0, 0xd9, 0x98, 0x82, 0x53, 0x62, 0x7a, 0x08, 0x15, 0x95, 0x8b, 0x62, 0x7a, 0x91, 0xae,
	0xa2, 0x6e, 0x68, 0x96, 0xec, 0xb3, 0xdd, 0x3e, 0x6d, 0x29, 0x60, 0x87, 0xdf, 0xf3, 0x70, 0x9a,
	0xb6, 0x99, 0x8a, 0x99, 0x30, 0x78, 0x4d, 0x3d, 0xaf, 0x41, 0x75, 0xb8, 0xca, 0x46, 0x71, 0x9a,
	0x27, 0xc5, 0x50, 0xa6, 0xc9, 0x78, 0xec, 0x68, 0x3f, 0x96, 0x2f, 0x7b, 0x65, 0xd1, 0xdd, 0x7e,
	0xec, 0xe8, 0xad, 0xb8, 0x68, 0xcb, 0xef, 0xe1, 0xd1, 0xd9, 0xda, 0xf2, 0xd5, 0xb2, 0xb8, 0x75,
	0xbf, 0x30, 0xf2, 0x15, 0xec, 0x9f, 0x97, 0x91, 0xad, 0x56, 0x41, 0xb8, 0x03, 0xcd, 0x37, 0x27,
	0xdc, 0xfa, 0xb4, 0xa0, 0xfa, 0x04, 0x3e, 0x3e, 0x13, 0xd5, 0xc6, 0x6f, 0x01, 0x5c, 0x19, 0x1f,
	0x8d, 0x8c, 0x65, 0x7a, 0x3f, 0x73, 0xc3, 0xff, 0x4b, 0x58, 0x7d, 0x7e, 0xf5, 0x07, 0xaf, 0xbc,
	0xfa, 0x57, 0xe8, 0xcc, 0xc2, 0xdf, 0xda, 0x2b, 0xfc, 0x6b, 0xc0, 0x17, 0x67, 0xf0, 0x6f, 0xd6,
	0xa1, 0x26, 0x86, 0xcf, 0xb8, 0x74, 0xd6, 0x1d, 0xf0, 0x35, 0x9b, 0xa7, 0xb9, 0x36, 0x0d, 0xdb,
	0x72, 0xb7, 0x83, 0xce, 0xa2, 0x5d, 0x8b, 0x77, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x20, 0x26,
	0x82, 0x72, 0x99, 0x0b, 0x00, 0x00,
}
